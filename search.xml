<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>css常见兼容问题</title>
      <link href="/2023/06/27/compatible/css-compatible/"/>
      <url>/2023/06/27/compatible/css-compatible/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h4 id="移动端的-1px"><a href="#移动端的-1px" class="headerlink" title="移动端的 1px"></a>移动端的 1px</h4><p>问题描述：1px 的边框。在高清屏下，移动端的 1px 会很粗。<br />产生原因：首先先要了解一个概念：<strong>DPR(devicePixelRatio) 设备像素比</strong>，它是默认缩放为 100%的情况下，设备像素和 CSS 逻辑像素的比值。目前主流的屏幕 DPR&#x3D;2 或者 3。CSS中设置的px是逻辑像素,这就造成1px变成物理像素的2px或者3px，比如2 倍屏，设备的物理像素要实现 1 像素，所以 CSS 逻辑像素只能是 0.5px。<br />下面介绍最常用的方法<br />通过CSS :before 选择器或CSS :after 选择器设置height:1px，同时缩放0.5倍实现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 底边框 */</span></span><br><span class="line"><span class="selector-class">.b-border</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b-border</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#d9d9d9</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">  -webkit-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 四条边 */</span></span><br><span class="line"><span class="selector-class">.setBorderAll</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: left top;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="KO4Ca"></a></p><h4 id="CSS动画页面闪白-动画卡顿"><a href="#CSS动画页面闪白-动画卡顿" class="headerlink" title="CSS动画页面闪白,动画卡顿"></a>CSS动画页面闪白,动画卡顿</h4><p>问题描述：CSS动画页面闪白,动画卡顿<br />解决方法: <br />1.尽可能地使用合成属性transform和opacity来设计CSS3动画，不使用position的left和top来定位 <br />2.开启硬件加速</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">-moz-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">-ms-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><a name="cvaLi"></a></p><h4 id="屏蔽用户选择"><a href="#屏蔽用户选择" class="headerlink" title="屏蔽用户选择"></a>屏蔽用户选择</h4><p>禁止用户选择页面中的文字或者图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  -webkit-touch-callout: none;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -khtml-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  -ms-user-select: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="IzfcU"></a></p><h4 id="清除输入框内阴影"><a href="#清除输入框内阴影" class="headerlink" title="清除输入框内阴影"></a>清除输入框内阴影</h4><p>问题描述：在 iOS 上，输入框默认有内部阴影 解决方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="GBwTM"></a></p><h4 id="禁止保存或拷贝图像"><a href="#禁止保存或拷贝图像" class="headerlink" title="禁止保存或拷贝图像"></a>禁止保存或拷贝图像</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  -webkit-touch-callout: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="o7i6z"></a></p><h4 id="输入框默认字体颜色设置"><a href="#输入框默认字体颜色设置" class="headerlink" title="输入框默认字体颜色设置"></a>输入框默认字体颜色设置</h4><p>设置 input 里面 placeholder 字体的颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>::-webkit-input-placeholder,</span><br><span class="line">textarea::-webkit-input-placeholder &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#c7c7c7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>:-moz-placeholder,</span><br><span class="line">textarea:-moz-placeholder &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#c7c7c7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>:-ms-input-placeholder,</span><br><span class="line">textarea:-ms-input-placeholder &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#c7c7c7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="b54E7"></a></p><h4 id="用户设置字号放大或者缩小导致页面布局错误"><a href="#用户设置字号放大或者缩小导致页面布局错误" class="headerlink" title="用户设置字号放大或者缩小导致页面布局错误"></a>用户设置字号放大或者缩小导致页面布局错误</h4><p>设置字体禁止缩放</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  -webkit-text-size-adjust: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  text-size-adjust: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">  -moz-text-size-adjust: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="QmFWH"></a></p><h4 id="android系统中元素被点击时产生边框"><a href="#android系统中元素被点击时产生边框" class="headerlink" title="android系统中元素被点击时产生边框"></a>android系统中元素被点击时产生边框</h4><p>部分android系统点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样。去除代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>&#123;</span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">  -webkit-user-modify:read-write-plaintext-only; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="OVd7J"></a></p><h4 id="iOS-滑动不流畅"><a href="#iOS-滑动不流畅" class="headerlink" title="iOS 滑动不流畅"></a>iOS 滑动不流畅</h4><p>ios 手机上下滑动页面会产生卡顿，手指离开页面，页面立即停止运动。整体表现就是滑动不流畅，没有滑动惯性。 iOS 5.0 以及之后的版本，滑动有定义有两个值 auto 和 touch，默认值为 auto。</p><ul><li>解决方式</li></ul><p>1.在滚动容器上增加滚动 touch 方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 2.设置 overflow 设置外部 overflow 为 hidden,设置内容元素 overflow 为 auto。内部元素超出 body 即产生滚动，超出的部分 body 隐藏。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> compatible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html常见兼容问题</title>
      <link href="/2023/06/27/compatible/html-compatible/"/>
      <url>/2023/06/27/compatible/html-compatible/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><a name="fwfFj"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>iphoneX的“刘海”为相机和其他组件留出了空间，同时在底部也留有可操作区域。其实对于 web 前端来说，刘海在绝大多数的场景下是可以不用处理的，因为 safari 或客户端（微信，手Q等）的 statusBar 已经替我们抹平了顶部刘海，我们只需要关心底部的可操作区域，因为如果页面底部有按钮的话，就会被可操作区域给挡住。<br><a name="MGMfZ"></a></p><h3 id="iPhoneX之变化"><a href="#iPhoneX之变化" class="headerlink" title="iPhoneX之变化"></a>iPhoneX之变化</h3><p><a name="yXFoK"></a></p><h4 id="1-屏幕尺寸、分辨率"><a href="#1-屏幕尺寸、分辨率" class="headerlink" title="1. 屏幕尺寸、分辨率"></a>1. 屏幕尺寸、分辨率</h4><p>追求全面屏的 iPhone X 此次启用 5.8 英寸的超视网膜高清显示屏，458ppi 的屏幕像素密度。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635168-afbcb6c4-7f5f-46bf-a1a4-6fbb06a145e4.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635168-afbcb6c4-7f5f-46bf-a1a4-6fbb06a145e4.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br />竖屏时像素分辨率达到了 1125px × 2436px（375pt × 812pt @3x），可以发现 iPhone X 的宽度与原来的 iPhone 7 等 4.7 英寸屏的宽度是一致的，而高度却大了 145pt，长宽比也由原来常见的 16 : 9 变成了 13 : 6。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635317-3044724c-c0e4-4f6a-9b7f-34072df4e91c.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635317-3044724c-c0e4-4f6a-9b7f-34072df4e91c.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="gssKl"></a></p><h4 id="2-顶部刘海"><a href="#2-顶部刘海" class="headerlink" title="2.顶部刘海"></a>2.顶部刘海</h4><p>新版本的 iPhone 顶部有高度为 30pt 的黑色圆角条来放置扬声器、前置摄像头及各种传感器等，江湖人称 「刘海儿」，这也意味着原页面此处的内容有可能会被遮挡导致显示欠佳，进而影响用户体验，所以这也是我们需要关注的一个适配点。<br />刘海在绝大多数的场景下是可以不用处理的，因为 safari 或客户端（微信，手Q等）的 statusBar 已经替我们抹平了顶部刘海。<br><a name="xJ7kr"></a></p><h4 id="3-虚拟-Home-键"><a href="#3-虚拟-Home-键" class="headerlink" title="3.虚拟 Home 键"></a>3.虚拟 Home 键</h4><p>iPhone X 取消了以往的实体圆形 home 键，取而代之的是在屏幕底部一条 134pt × 5pt 的虚拟指示条。整个虚拟 Home 键也占据了一个高度 34pt 的保留区域。<br />原来实体 Home 键的单击返回桌面、双击唤起多任务处理、长按启动 Siri 等等基础功能操作，也幻化成了不同的手势操作或新技术替代，具体交互手势将在下节详述。而为了增强手势的操作感，整个虚拟 Home 键也占据了一个高度 34pt 的保留区域。<br />而在非特定条件下，这个虚拟指示条无论在横、竖屏中都将是强制性设计元素出现在屏幕底部上，意味着这设计中必须考虑好周围元素与它的兼容，因此，这又是我们适配过程中的另一个关注点。只有在需要获得沉浸式体验（如播放视频、查看图片）时，才会建议开发者可以虚拟指示条 「自动隐藏」功能。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635248-bb443c96-fa7e-4cb0-8658-e9f810cd41fd.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635248-bb443c96-fa7e-4cb0-8658-e9f810cd41fd.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="w2Klj"></a></p><h4 id="4-安全区域"><a href="#4-安全区域" class="headerlink" title="4.安全区域"></a>4.安全区域</h4><p>根据上述顶部刘海、虚拟 home 键的不同要求，Apple 提供了横、竖屏状态下的安全区域视觉规范。</p><ul><li>竖屏：竖屏时候，除去屏幕最顶部往下 44pt，底部往上 34pt 后，中间部分视为安全区域。</li><li>横屏：而横屏时候则相对复杂一些，因为虚拟指示条通常情况下都是出现在屏幕底部，所以不仅屏幕左右会留出 44pt 的空白位置，屏幕底部也会留出 21pt 的位置。</li></ul><p>至于为什么没有 “刘海儿” 一侧也会留出空白位置，则是 Apple 认为，“刘海儿”出现于左侧或右侧并不确定，让安全区域中的内容居中显示，可以避免屏幕旋转所造成的 UI 元素位置变化。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635212-b26f4b24-0508-4a49-949c-68e341db7424.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635212-b26f4b24-0508-4a49-949c-68e341db7424.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="ZRb8e"></a></p><h3 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h3><p>了解到 iPhone X 这边变化之后，我们大致可以知道需要在于安全区域布局、全屏图缩放裁切以及边界交互手势做相关的适配。在 iOS11 中我们可以使用 viewport-fit&#x3D;cover + safe-area-inset-*，<br><a name="xTEji"></a></p><h4 id="关于viewport-fit"><a href="#关于viewport-fit" class="headerlink" title="关于viewport-fit"></a>关于viewport-fit</h4><p>viewport-fit 可以设置可视视窗的大小，它有三个属性值：</p><ul><li>Auto：默认值。这个值不影响初始布局视窗，整个 Web 页面是可视的，与Contain表现一致。</li><li>Contain：最初的布局视窗和视觉布局视窗被设置为最大的矩形（左图）。</li><li>Cover：初始布局视窗和视觉布局视窗被设置为设备物理屏幕的限定矩形（右图）。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635183-fb3978a6-de41-4ae6-b070-8589ee304007.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635183-fb3978a6-de41-4ae6-b070-8589ee304007.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="s5zDN"></a></p><h4 id="关于-safe-area-inset"><a href="#关于-safe-area-inset" class="headerlink" title="关于 safe-area-inset-*"></a>关于 safe-area-inset-*</h4><p>各种 iPhone x 都是不规则形状，我们如何控制页面元素到安全区域呢？Apple 把安全区域的位置通过 css 属性提供给了开发者，它们可以通过CSS的constant( )函数来完成：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635694-436826a6-fcfc-4a5c-baf9-bac3a995e66c.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635694-436826a6-fcfc-4a5c-baf9-bac3a995e66c.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><ul><li>constant(safe-area-inset-top)：在Viewport顶部的安全区域内设置量（CSS像素）</li><li>constant(safe-area-inset-bottom)：在Viewport底部的安全区域内设置量（CSS像素）</li><li>constant(safe-area-inset-left)：在Viewport左边的安全区域内设置量（CSS像素）</li><li>constant(safe-area-inset-right)：在Viewport右边的安全区域内设置量（CSS像素）</li><li><br /></li></ul><p>简单来说我们可以通过 constant( ) 可以获取到非安全边距，再结合 padding 或 margin 来控制页面元素避开非安全区域。 Webkit 在 iOS11 中新增 CSS Functions: env( ) 替代 constant( )，文档中推荐使用 env( )，而 constant( ) 从 Safari Techology Preview 41 和 iOS11.2 Beta 开始会被弃用。在不支持 env( ) 的浏览器中，会自动忽略这一样式规则，不影响网页正常的渲染。为了达到最大兼容目的，我们可以 constant( ) 和 env( ) 同时使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footerClass</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom); <span class="comment">/* iOS 11.0 */</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom); <span class="comment">/* iOS 11.2 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="lVFnh"></a></p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p><a name="ei1Oe"></a></p><h4 id="1-设置网页在可视区域的布局方式"><a href="#1-设置网页在可视区域的布局方式" class="headerlink" title="1.设置网页在可视区域的布局方式"></a>1.设置网页在可视区域的布局方式</h4><p>新增 viweport-fit 属性，使得页面内容完全覆盖整个窗口：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>, initial-scale=<span class="number">1.0</span>, viewport-fit=cover, minimum-scale=<span class="number">1</span>, maximum-scale=<span class="number">1.0</span>, user-scalable=<span class="number">0</span>&quot;&gt;</span><br></pre></td></tr></table></figure><p><a name="YdtfC"></a></p><h4 id="2-让主体内容控制在安全区域内"><a href="#2-让主体内容控制在安全区域内" class="headerlink" title="2.让主体内容控制在安全区域内"></a>2.让主体内容控制在安全区域内</h4><p>假设我们的底部按钮高度是50px：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="built_in">env</span>(safe-area-inset-top);</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="built_in">env</span>(safe-area-inset-right);</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;  <span class="comment">/* 兼容不支持 env( ) 的设备  */</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">calc</span>(<span class="built_in">env</span>(safe-area-inset-bottom) + <span class="number">50px</span>); <span class="comment">/* 在 iphone x + 中本句才会生效 */</span></span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="built_in">env</span>(safe-area-inset-left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有两个关键点：</p><ol><li>写在前面的 padding-bottom: 50px 为了兼容没有底部胡子的设备，让主体内容偏移出底部按钮的高度，避免按钮遮挡内容。</li><li><code>padding-bottom: calc(env(safe-area-inset-bottom) + 50px);</code> 计算 底部非安全区域距离 与 底部按钮高度 之和 来做为 <code>padding-bottom</code>值，如果设备支持 env，那么 calc 会计算出一个合法的值，本句的优先级则最高，会覆盖前面的 <code>padding-bottom: 50px</code>。否则 calc 会计算出一个不合法的值，则本句声明不会生效。这样在不支持 env 设备中也可以达到兼容的目的。</li></ol><p>目前到这，在横屏场景下左侧的内容就不会被刘海遮挡住了：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635706-86150bda-7c7b-445b-8d0e-c11ff52e1d77.png#averageHue=%238c9c83&clientId=u30bf360d-bf01-4&from=paste&id=uf3b439d5&originHeight=544&originWidth=960&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uf1e4d04d-c750-41c8-8b26-eda83b6e1c8&title=" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635706-86150bda-7c7b-445b-8d0e-c11ff52e1d77.png#averageHue=%238c9c83&clientId=u30bf360d-bf01-4&from=paste&id=uf3b439d5&originHeight=544&originWidth=960&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uf1e4d04d-c750-41c8-8b26-eda83b6e1c8&title=" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="nvhAH"></a></p><h4 id="3-底部按钮的处理"><a href="#3-底部按钮的处理" class="headerlink" title="3.底部按钮的处理"></a>3.底部按钮的处理</h4><p>首先给底部按钮一个外层容器 .btn-container ，设置样式时其中有几点比较关键：</p><ol><li>设置<code>padding-bottom: env(safe-area-inset-bottom);</code>增加一个 padding 值，让底部向外扩展一个非安全区域的距离。</li><li>设置<code>background: #FFF</code> 让整个 <code>.btn-container</code>背景为白色（包括刚新增的 <code>padding-bottom</code> 的区域）这样就可以遮挡住了底部内容。</li><li>设置 <code>box-sizing: content-box;</code>，因为在通常情况下 css 在 reset 阶段一般都设置了<code>* &#123;box-sizing: border-box;&#125;</code>这样一来设置 padding 就不能向外扩展距离了，所以在这里我们要把他改回 <code>content-box</code>。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-container</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#00c340</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果如图所示<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635866-dc17d470-498c-41cb-b62e-4095ded62ab9.png#averageHue=%2399a694&clientId=u30bf360d-bf01-4&from=paste&id=u918115cd&originHeight=960&originWidth=544&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u87459362-8a26-445e-b7fd-dc906a20d61&title=" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635866-dc17d470-498c-41cb-b62e-4095ded62ab9.png#averageHue=%2399a694&clientId=u30bf360d-bf01-4&from=paste&id=u918115cd&originHeight=960&originWidth=544&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u87459362-8a26-445e-b7fd-dc906a20d61&title=" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p>在 safari 中，页面往上稍滑动一点，出现 safari 的操作栏后，底部按钮依然会紧贴着操作栏：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635821-83d98fec-a439-45dc-bace-df3849d54600.png#averageHue=%238c9484&clientId=u30bf360d-bf01-4&from=paste&id=u44f16efe&originHeight=799&originWidth=453&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u72633772-beb4-4a1b-8a0e-e8023da51b1&title=" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/300943/1666081635821-83d98fec-a439-45dc-bace-df3849d54600.png#averageHue=%238c9484&clientId=u30bf360d-bf01-4&from=paste&id=u44f16efe&originHeight=799&originWidth=453&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u72633772-beb4-4a1b-8a0e-e8023da51b1&title=" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="AYsAZ"></a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://link.juejin.cn/?target=https://www.jianshu.com/p/a1e8c7cf8821">如何适配 iPhone X</a><br /><a href="https://link.juejin.cn/?target=https://www.w3.org/TR/css-round-display-1/%23viewport-fit-descriptor">CSS Round Display Level 1</a><br /><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/conflicting/Web/CSS/@viewport_a33ee59ffd8336ffb3336900dea02e9f">viewport-fit</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compatible </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js常见兼容问题</title>
      <link href="/2023/06/27/compatible/js-compatible/"/>
      <url>/2023/06/27/compatible/js-compatible/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><a name="aqBRj"></a><h3 id="iPhone7用for…in-遍历数组失效"><a href="#iPhone7用for…in-遍历数组失效" class="headerlink" title="iPhone7用for…in 遍历数组失效"></a>iPhone7用for…in 遍历数组失效</h3><p>问题描述：最初学习使用js时，觉得<code>for...in</code>遍历比<code>for循环</code>简洁，后期在用户反馈后发现iPhone7不支持用for…in遍历数组<br />解决方式： 改为<code>for循环</code>遍历</p><p><a name="kiAHW"></a></p><h3 id="移动端点击事件300-ms延迟问题"><a href="#移动端点击事件300-ms延迟问题" class="headerlink" title="移动端点击事件300 ms延迟问题"></a>移动端点击事件300 ms延迟问题</h3><p>问题描述：移动端web网页是有300ms延迟的，往往会造成按钮点击延迟甚至是点击失效。<br />解决方式：</p><ul><li>fastclick可以解决在手机上点击事件的300ms延迟</li><li>zepto.js的touch模块，tap事件也是为了解决在click的延迟问题</li></ul><p><a name="nK6Db"></a></p><h3 id="audio-和-video-在-ios-和-andriod-中自动播放"><a href="#audio-和-video-在-ios-和-andriod-中自动播放" class="headerlink" title="audio 和 video 在 ios 和 andriod 中自动播放"></a>audio 和 video 在 ios 和 andriod 中自动播放</h3><p>出于优化用户体验，苹果系统和安卓系统通常都会禁止自动播放和禁止页面加载时使用 JS 触发播放，必须由用户主动点击页面才可以触发播放。通过给页面根元素加touchstart的监听事件实现触发播放</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">one</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  audio.<span class="title function_">play</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a name="aIKcn"></a></p><h3 id="iOS-上拉边界下拉出现空白"><a href="#iOS-上拉边界下拉出现空白" class="headerlink" title="iOS 上拉边界下拉出现空白"></a>iOS 上拉边界下拉出现空白</h3><p>问题描述：手指按住屏幕下拉，屏幕顶部会多出一块白色区域。手指按住屏幕上拉，底部多出一块白色区域。<br />产生原因：在 iOS 中，手指按住屏幕上下拖动，会触发 touchmove 事件。这个事件触发的对象是整个 webview 容器，容器自然会被拖动，剩下的部分会成空白。<br />解决方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&#x27;touchmove&#x27;</span>,</span><br><span class="line">  <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">_isScroller</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 阻止默认事件</span></span><br><span class="line">    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">passive</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a name="emtPB"></a></p><h3 id="ios-日期转换-NAN-的问题"><a href="#ios-日期转换-NAN-的问题" class="headerlink" title="ios 日期转换 NAN 的问题"></a>ios 日期转换 NAN 的问题</h3><p>将日期字符串的格式符号替换成’&#x2F;‘</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;yyyy-MM-dd&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="ibcS5"></a></p><h3 id="软键盘问题"><a href="#软键盘问题" class="headerlink" title="软键盘问题"></a>软键盘问题</h3><p><a name="oXllV"></a></p><h4 id="iOS-系统中文输入法输入英文时，字母之间可能会出现一个六分之一空格"><a href="#iOS-系统中文输入法输入英文时，字母之间可能会出现一个六分之一空格" class="headerlink" title="iOS 系统中文输入法输入英文时，字母之间可能会出现一个六分之一空格"></a>iOS 系统中文输入法输入英文时，字母之间可能会出现一个六分之一空格</h4><p>解决方式：可以通过正则去掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/\u2006/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><p><a name="Qmh75"></a></p><h4 id="IOS-键盘弹起挡住原来的视图"><a href="#IOS-键盘弹起挡住原来的视图" class="headerlink" title="IOS 键盘弹起挡住原来的视图"></a>IOS 键盘弹起挡住原来的视图</h4><p>解决方式：</p><ul><li>可以通过监听移动端软键盘弹起 Element.scrollIntoViewIfNeeded（Boolean）方法用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。 如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动。</li><li>true，则元素将在其所在滚动区的可视区域中居中对齐。</li><li>false，则元素将与其所在滚动区的可视区域最近的边缘对齐。 根据可见区域最靠近元素的哪个边缘，元素的顶部将与可见区域的顶部边缘对准，或者元素的底部边缘将与可见区域的底部边缘对准。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">activeElement</span>.<span class="property">tagName</span> === <span class="string">&#x27;INPUT&#x27;</span> ||</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">activeElement</span>.<span class="property">tagName</span> === <span class="string">&#x27;TEXTAREA&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&#x27;scrollIntoView&#x27;</span> <span class="keyword">in</span> <span class="variable language_">document</span>.<span class="property">activeElement</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">activeElement</span>.<span class="title function_">scrollIntoView</span>(<span class="literal">false</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">activeElement</span>.<span class="title function_">scrollIntoViewIfNeeded</span>(<span class="literal">false</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a name="RQUuS"></a></p><h4 id="onkeyUp-和-onKeydown-兼容性问题"><a href="#onkeyUp-和-onKeydown-兼容性问题" class="headerlink" title="onkeyUp 和 onKeydown 兼容性问题"></a>onkeyUp 和 onKeydown 兼容性问题</h4><p>IOS 中 input 键盘事件 keyup、keydown、等支持不是很好, 用 input 监听键盘 keyup 事件，在安卓手机浏览器中没有问题，但是在 ios 手机浏览器中用输入法输入之后，并未立刻相应 keyup 事件</p><p><a name="vb5qX"></a></p><h4 id="IOS12-输入框难以点击获取焦点，弹不出软键盘"><a href="#IOS12-输入框难以点击获取焦点，弹不出软键盘" class="headerlink" title="IOS12 输入框难以点击获取焦点，弹不出软键盘"></a>IOS12 输入框难以点击获取焦点，弹不出软键盘</h4><p>定位找到问题是 fastclick.js 对 IOS12 的兼容性，可在 fastclick.js 源码或者 main.js 做以下修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">FastClick</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">focus</span> = <span class="keyword">function</span>(<span class="params">targetElement</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> length</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    deviceIsIOS &amp;&amp;</span><br><span class="line">    targetElement.<span class="property">setSelectionRange</span> &amp;&amp;</span><br><span class="line">    targetElement.<span class="property">type</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;date&#x27;</span>) !== <span class="number">0</span> &amp;&amp;</span><br><span class="line">    targetElement.<span class="property">type</span> !== <span class="string">&#x27;time&#x27;</span> &amp;&amp;</span><br><span class="line">    targetElement.<span class="property">type</span> !== <span class="string">&#x27;month&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    length = targetElement.<span class="property">value</span>.<span class="property">length</span></span><br><span class="line">    targetElement.<span class="title function_">setSelectionRange</span>(length, length)</span><br><span class="line">    targetElement.<span class="title function_">focus</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    targetElement.<span class="title function_">focus</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="vo5o5"></a></p><h4 id="IOS-键盘收起时页面没用回落，底部会留白"><a href="#IOS-键盘收起时页面没用回落，底部会留白" class="headerlink" title="IOS 键盘收起时页面没用回落，底部会留白"></a>IOS 键盘收起时页面没用回落，底部会留白</h4><p>通过监听键盘回落时间滚动到原来的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;focusout&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//input输入框弹起软键盘的解决方案。</span></span><br><span class="line"><span class="keyword">var</span> bfscrolltop = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span><br><span class="line">$(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  .<span class="title function_">focus</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span></span><br><span class="line">    <span class="comment">//console.log(document.body.scrollTop);</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">blur</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = bfscrolltop</span><br><span class="line">    <span class="comment">//console.log(document.body.scrollTop);</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ALt6l"></a></p><h4 id="IOS-下-fixed-失效"><a href="#IOS-下-fixed-失效" class="headerlink" title="IOS 下 fixed 失效"></a>IOS 下 fixed 失效</h4><p>问题描述：软键盘唤起后，页面的 fixed 元素将失效，变成了 absolute，所以当页面超过一屏且滚动时，失效的 fixed 元素就会跟随滚动了。不仅限于 type&#x3D;text 的输入框，凡是软键盘（比如时间日期选择、select 选择等等）被唤起，都会遇到同样地问题。 解决方法: 不让页面滚动，而是让主体部分自己滚动,主体部分高度设为 100%，overflow:scroll</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;warper&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;main&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fix-bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.warper</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">  -webkit-<span class="attribute">overflow</span>-scrolling: touch; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fix-bottom</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compatible </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 库</title>
      <link href="/2023/06/27/frontend/collection/react-ku/"/>
      <url>/2023/06/27/frontend/collection/react-ku/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659661028895-0903535d-f3f2-4f99-8c0f-69bdfefb5694.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659661028895-0903535d-f3f2-4f99-8c0f-69bdfefb5694.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>1、状态管理</strong><br /><strong>（1）React Redux</strong><br />Redux 是 JavaScript 应用程序的状态容器，提供可预测的状态管理。React Redux 是 Redux 官方实现的 React 绑定。可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。不仅于此，它还提供超爽的开发体验。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659623141620-84e290b8-c9ba-4a4e-8e65-295891ad4860.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659623141620-84e290b8-c9ba-4a4e-8e65-295891ad4860.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）Mobx</strong><br />MobX 是一个身经百战的库，它通过运用透明的函数式响应编程使状态管理变得简单和可扩展。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659623224139-396bcd40-f8ae-4ec4-b05f-1b4d5da9a487.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659623224139-396bcd40-f8ae-4ec4-b05f-1b4d5da9a487.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（4）Redux-Saga</strong><br />redux-saga 是一个旨在使应用程序的副作用（即，数据获取等异步操作和访问浏览器缓存等不纯操作）更易于管理、执行更高效、易于测试以及更好地处理故障的库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659621552419-2bcd4f4f-b8b1-4824-a2b6-b91492889f19.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659621552419-2bcd4f4f-b8b1-4824-a2b6-b91492889f19.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>2、文档网站</strong><br /><strong>（1）Docusaurus</strong><br />Docusaurus 是由 facebook 开源的一个用于轻松构建、部署和维护开源项目网站的项目。使用 Docusaurus 可以让你<strong>专注于内容</strong>，并只需编写 Markdown 文件即可。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659625158061-6984b773-f55d-430a-8ace-49e7cdfcf1ba.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659625158061-6984b773-f55d-430a-8ace-49e7cdfcf1ba.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）Storybook</strong><br />Storybook 是 UI 组件的开发环境，它允许开发者浏览组件库，查看每个组件的不同状态，以及交互地开发和测试组件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659625242414-a9892d68-35a5-4486-9ba4-a738d3cad1d1.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659625242414-a9892d68-35a5-4486-9ba4-a738d3cad1d1.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）React Styleguidist</strong><br />React Styleguidist是一个React设计规范生成器，一个本地组件开发环境，支持热重载，共享的设计规范。它会列出了组件propTypes，并基于Markdown文件显示可编辑的实时使用示例。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659625388407-8ba2a64c-0bfd-4d0d-a371-84c79b999539.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659625388407-8ba2a64c-0bfd-4d0d-a371-84c79b999539.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>3、路由</strong><br /><strong>（1）React Router</strong><br />React Router 是完整的 React 路由解决方案。React Router 保持 UI 与 URL 同步。它拥有简单的 API 与强大的功能例如代码缓冲加载、动态路由匹配、以及建立正确的位置过渡处理。<br /><img src="https://cdn.nlark.com/yuque/0/2022/webp/1500604/1659623826534-3239472c-5e96-4fed-869e-40ab485ee5b1.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/webp/1500604/1659623826534-3239472c-5e96-4fed-869e-40ab485ee5b1.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）React Location</strong><br />React Location 是客户端 React 应用程序的路由器。它支持异步路由、深度集成的搜索参数 API、可选的 JSX 路由定义、用于路由加载器缓存的预打包简单缓存实现、带有外部缓存和存储的轻松集成等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659623883093-6eaf5b0d-5612-438b-8987-00747ba39657.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659623883093-6eaf5b0d-5612-438b-8987-00747ba39657.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>4、脚手架</strong><br /><strong>（1）Create React App</strong><br />Create React App 是一种官方支持的创建单页 React 应用程序的方式。它提供了一个没有配置的现代构建设置。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659624007783-5b261991-b61e-43ab-bcea-8940b75ba621.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659624007783-5b261991-b61e-43ab-bcea-8940b75ba621.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）Rekit</strong><br />Rekit是开源的一个脚手架，用于使用 React、Redux 和 React-router 构建可扩展的 Web 应用程序。它可以帮助开发人员专注于业务逻辑，而不是处理大量的库、模式、配置等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659624254667-e2b02254-dd61-47ae-a5bb-7d3744df5bdb.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659624254667-e2b02254-dd61-47ae-a5bb-7d3744df5bdb.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>5、应用调试</strong><br /><strong>（1）React Developer Tools</strong><br />React Devtools 可以在 Chrome 和 Firefox 开发者工具审查 React 组件的浏览器扩展。可以用于检查React组件层次结构，在页面上显示React组件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659624362010-fbc8f4c1-2cfd-4e15-870d-0a919077f73b.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659624362010-fbc8f4c1-2cfd-4e15-870d-0a919077f73b.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）Why Did You Render</strong><br />Why Did You Render 是由 Welldone Software 开发的，可以在开发的时候就检测到一些不必要的渲染问题，告诉我们当前渲染是什么原因导致的。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622826859-f22252b9-f21a-4987-8f2a-7334581d93a3.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622826859-f22252b9-f21a-4987-8f2a-7334581d93a3.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>6、动画</strong><br /><strong>（1）Animate.css</strong><br />animate.css 是一个使用CSS3的animation制作的动画效果的CSS集合，里面预设了很多种常用的动画，且使用非常简单。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627823935-e9f09cff-8b4d-4fed-aad8-018aa93d4d9b.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627823935-e9f09cff-8b4d-4fed-aad8-018aa93d4d9b.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）React Spring</strong><br />react-spring 是一个基于弹簧物理学的动画库，满足大多数与UI相关的动画需求，提供了足够灵活的工具，可以自信地将想法投射到不断变化的界面中。该库代表了一种现代动画方法。它继承了 animated 强大的插值和性能，以及 react-motion 的易用性。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627719149-06917885-e966-401f-b69b-8d01bb19f3ed.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627719149-06917885-e966-401f-b69b-8d01bb19f3ed.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）React Reveal</strong><br />React Reveal 是一个用于 React 的高性能动画库。它占用空间小，专门为 ES6 中的 React 编写。可用于创建各种炫酷的滚动效果显<img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627757718-0ad92ecf-0bdb-4d10-8c45-7b683f357b87.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627757718-0ad92ecf-0bdb-4d10-8c45-7b683f357b87.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4">示。</p><p><strong>GitHub：</strong><a href="https://github.com/rnosov/react-reveal">https://github.com/rnosov/react-reveal</a></p><p><strong>（4）React-Motion</strong><br />React-Motion 是一个动画库，拥有一种更轻松的方法来创建和实现逼真的动画。它利用物理学来为 React 元素创建几乎自然的动画。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659629685780-7bec1943-43a3-4654-a095-741763db9004.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659629685780-7bec1943-43a3-4654-a095-741763db9004.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>7、可视化</strong><br /><strong>（1）Apache ECharts</strong><br />Apache ECharts 是一款基于Javascript的数据可视化图表库，提供直观，生动，可交互，可个性化定制的数据可视化图表。它是用纯 JavaScript 编写的，基于zrender，是一个全新的轻量级画布库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659626661082-2ae6dc8a-d0a4-447c-a3ec-41f33305f057.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659626661082-2ae6dc8a-d0a4-447c-a3ec-41f33305f057.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）Recharts</strong><br />Recharts 是一个用React和D3构建的、重新定义的图表库。该库的主要目的是在 React 应用程序中轻松编写图表。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659626691898-90432456-3263-4cfe-9d6c-5beda120e6e7.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659626691898-90432456-3263-4cfe-9d6c-5beda120e6e7.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）react-vis</strong><br />react-vis 是一组用于呈现常见数据可视化图表的 react 组件，例如折线图&#x2F;面积图&#x2F;条形图、热图、散点图、等高线图、六边形热图、饼图和圆环图、旭日形图、雷达图、平行坐标和树形图。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659626765054-8ab6e054-e28f-49a0-b7f6-daac1d1f2814.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659626765054-8ab6e054-e28f-49a0-b7f6-daac1d1f2814.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>8、UI组件</strong><br /><strong>（1）Ant Design</strong><br />GitHub 上超过 269 k 个项目使用了 Ant Design 组件库，Ant Design of React 是一个基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。Ant Design 提供了大量高质量的组件，非常适合快速构建整个 UI 框架，也可以只使用单个组件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627209475-2aa8d171-5188-4475-95ec-7c82f22dcae6.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627209475-2aa8d171-5188-4475-95ec-7c82f22dcae6.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）MUI</strong><br />MUI 是一个基于 Google 的 Material Design 的简单且可定制的 React 组件库。MUI 不仅是一个组件库，而是一个完整的设计系统。它具有一套完整的指南、设计原则和 UI 设计最佳实践系统。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627326985-59e81a3b-948e-4373-b402-1a9c206e5cb9.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627326985-59e81a3b-948e-4373-b402-1a9c206e5cb9.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）React Bootstrap</strong><br />React-Bootstrap，是比较古老的 React UI 组件库之一。它是使用 React 来重新构建了前端框架 Bootstrap。该库由完全响应并且可访问的现成的组件组成。所有设计元素都是高度可定制的。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627626082-3d969ead-b715-4c8b-a518-d4b6a9a2de21.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627626082-3d969ead-b715-4c8b-a518-d4b6a9a2de21.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>9、性能优化</strong><br /><strong>（1）React Virtualized</strong><br />React Virtualized 是一个以高效渲染大型列表和表格数据的响应式组件，可以用来解决长列表渲染问题。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659628708101-b50b95ef-9cd1-4c52-b239-48363c1b3236.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659628708101-b50b95ef-9cd1-4c52-b239-48363c1b3236.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）React Window</strong><br />React Window 是用于高效渲染大型列表和表格数据的 React 组件。通过仅渲染大型数据集的一部分（刚好足以填充满视口）来工作。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659629884077-ce9fcfeb-1e7b-47ae-9c6c-cb1eac6d34ad.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659629884077-ce9fcfeb-1e7b-47ae-9c6c-cb1eac6d34ad.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>10、表单</strong><br /><strong>（1）React Hook Form</strong><br />React Hook Form 是一个高性能、灵活、易拓展、易于使用的表单校验库，用于 React Web 和 React Native 的表单验证。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659628331580-040f8010-42ac-4382-b772-b2f37f9d71eb.png?x-oss-process=image/resize,w_957,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659628331580-040f8010-42ac-4382-b772-b2f37f9d71eb.png?x-oss-process=image/resize,w_957,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）Formik</strong><br />Formik是一个可以在React中构建表单的组件。它旨在轻松管理具有复杂验证的表单，支持同步和异步表单级和字段级验证。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659628491386-babf6236-717c-4b5d-ac8f-85f727dbe68a.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659628491386-babf6236-717c-4b5d-ac8f-85f727dbe68a.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）React Final Form</strong><br />React Final Form 是Final Form 的一个精简 React 包装器，它是一个基于订阅的表单状态管理库，使用观察者模式，因此只有需要更新的组件会随着表单状态的变化而重新渲染。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659628589263-8999e454-3825-44d8-824f-72e4c6f85098.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659628589263-8999e454-3825-44d8-824f-72e4c6f85098.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>11、富文本编辑器</strong><br /><strong>（1）Draft.js</strong><br />Draft.js 是 Facebook 的一个开源项目，是 React 项目首选的富文本编辑器框架。这是一个健壮、可扩展和可定制的框架。Draft.js 遵循与 React 中的受控组件相同的范例，并提供了一个 Editor 呈现富文本输入的组件。它还公开了一个EditorStateAPI 来处理&#x2F;存储Editor组件中的状态更新。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659626895080-58dd4d74-8fd8-45f8-a404-7db48cd155c7.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659626895080-58dd4d74-8fd8-45f8-a404-7db48cd155c7.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）Slate.js</strong><br />Slate.js 是受 Draft.js 启发的富文本编辑器。它是一个可深度定制的富编辑器框架，专用于 React。与 Draft.js 类似，它具有良好的 API、强大的插件基础设施以及与 React 的深度连接。此外，插件生态系统比 Draft.js 小一些，但它的插件质量会更好。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659626957073-9ac22d04-0bf8-441d-95d5-4ff9d5616ad6.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659626957073-9ac22d04-0bf8-441d-95d5-4ff9d5616ad6.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）TinyMCE</strong><br />TinyMCE 是一个热门的富文本编辑器。它的目标是帮助其他开发人员构建精美的 Web 内容解决方案。它易于集成，可以部署在基于云的、自托管或混合环境中。该设置使得合并诸如 Angular、React 和 Vue 等框架成为可能。它还可以使用 50 多个插件进行扩展，每个插件都有 100 多个自定义选项。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627018874-2538f8e0-4d93-4442-bc43-204c02bbeacf.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627018874-2538f8e0-4d93-4442-bc43-204c02bbeacf.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（4）wangEditor</strong><br />wangEditor 是一个使用Typescript 开发的 Web 富文本编辑器， 轻量、简洁、易用、开源免费。它兼容常见的 PC 浏览器：Chrome，Firefox，Safar，Edge，QQ 浏览器，IE11。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627128764-7e4d9fef-8c21-4ecb-a60a-1178e9e7eb90.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659627128764-7e4d9fef-8c21-4ecb-a60a-1178e9e7eb90.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>12、CSS in JS</strong><br /><strong>（1）Styled–Components</strong><br />styled-components 可以在 JavaScript 代码中使用 CSS 来设置 React 组件的样式。通过这个库可以自定义组件的样式，它会将给定的样式包装成一个组件，可以直接使用这个组件，也不需要组件和样式之间的映射，即创建后就是一个正常的React 组件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659629425277-2395fbc6-96c9-40cd-bcf3-d448d0944564.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659629425277-2395fbc6-96c9-40cd-bcf3-d448d0944564.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）Emotion</strong><br />Emotion 是一个高性能且灵活的 CSS-in-JS 库。基于许多其他 CSS-in-JS 库，它允许开发人员使用字符串或对象样式快速设置应用样式。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659629210965-2a64670e-cd04-479b-8233-9c6e892bc8d7.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659629210965-2a64670e-cd04-479b-8233-9c6e892bc8d7.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>13、数据请求</strong><br /><strong>（1）Axios</strong><br />Axios 是一个基于 promise 网络请求库，作用于node.js 和浏览器中。 它是 isomorphic 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js http 模块，而在客户端 (浏览端) 则使用 XMLHttpRequests。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659628850112-88db8b6d-893d-4bf6-b09d-68a59fa84656.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659628850112-88db8b6d-893d-4bf6-b09d-68a59fa84656.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）React Query</strong><br />React Query 是一个适用于react hooks的请求库，它可以为任何类型的异步数据提供React状态管理功能，使React中的获取、缓存、同步和更新服务器数据变得轻而易举。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659629045249-67dfcc4e-7f4c-433d-a2b3-f47f5022dda0.png?x-oss-process=image/resize,w_955,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659629045249-67dfcc4e-7f4c-433d-a2b3-f47f5022dda0.png?x-oss-process=image/resize,w_955,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>14、测试</strong><br /><strong>（1）Jest</strong><br />Jest 是由 Facebook 开发的 JavaScript 测试框架。它应该是测试 React 的首选，因为它是由 React 的发明者创建的，并且得到了 React 社区的支持和开发。它还支持 Babel、TypeScript、Node、Angular 和 Vue 以及其他 JS 框架。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659624570394-2473b035-c0fe-4dd3-a2e7-4eea4737fc17.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659624570394-2473b035-c0fe-4dd3-a2e7-4eea4737fc17.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）React Testing Library</strong><br />React Testing Library 基于DOM Testing Library的基础上添加一些API，主要用于测试React组件。该库在使用过程并不关注组件的内部实现，而是更关注测试。该库基于react-dom和react-dom&#x2F;test-utils，是以上两者的轻量实现。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659624741784-d4c6ce19-875e-4f47-9a70-f58c81b2925e.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659624741784-d4c6ce19-875e-4f47-9a70-f58c81b2925e.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）Vitest</strong><br />Vitest 是一个由 Vite 提供支持的极速单元测试框架。其和 Vite 的配置、转换器、解析器和插件保持一致、开箱即用的 TypeScript &#x2F; JSX 支持、支持 Smart 和 instant watch 模式，如同用于测试的 HMR、内置 Tinyspy 用于模拟、打标和监察等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659625017469-b90d5172-7866-49e6-9b27-9d1d2744176e.png?x-oss-process=image/resize,w_951,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659625017469-b90d5172-7866-49e6-9b27-9d1d2744176e.png?x-oss-process=image/resize,w_951,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>15、自定义Hooks</strong><br /><strong>（1）Ahooks</strong><br />ahooks 是一套由阿里巴巴开源的 React Hooks 库，封装了大量好用的 Hooks。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622548861-c18e9673-9685-4dfb-a5f0-d41ee3db7857.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622548861-c18e9673-9685-4dfb-a5f0-d41ee3db7857.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）React Use</strong><br />React Use 是一个必不可少的 React Hooks 集合。其包含了传感器、用户界面、动画效果、副作用、生命周期、状态这六大类的Hooks。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622548858-c93d03eb-4b72-4f1b-b313-fd219482e5c9.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622548858-c93d03eb-4b72-4f1b-b313-fd219482e5c9.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）useHooks</strong><br />useHooks 是一组易于理解的 React Hook集合。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622619158-bba9fbc2-2dd9-404f-bfc6-a4ac782207cd.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622619158-bba9fbc2-2dd9-404f-bfc6-a4ac782207cd.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>16、服务端渲染</strong><br /><strong>（1）Next.js</strong><br />Next.js 是一个用于服务器渲染的通用 JavaScript Web 应用程序的小型框架，该框架基于 React、Webpack 和 Babel 构建，为该网站提供了强大的支持。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659621913376-e477fa98-3c6c-4901-b91f-07f07e3baa48.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659621913376-e477fa98-3c6c-4901-b91f-07f07e3baa48.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）Razzle</strong><br />Razzle是类似于next.js的简单服务端框架，用于在服务端渲染 React 应用程序。比较方便的一点是无需配置。通过将一般的JavaScript应用抽象成单个的依赖，然后将框架，路由和数据提取出来。同时，Razzle 支持可插拔渲染。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622042021-e310bd26-437d-43a1-842a-93e9d266097d.png?x-oss-process=image/resize,w_955,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622042021-e310bd26-437d-43a1-842a-93e9d266097d.png?x-oss-process=image/resize,w_955,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>17、拖拽排序</strong><br /><strong>（1）React Beautiful Dnd</strong><br />react-beautiful-dnd 是一款美观且简单易用的 React 列表拖拽库。其动画效果自然，性能优秀，简洁而强大的 API，易于上手，与标准浏览器的互动性非常好。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1659622363765-7be10003-191f-407b-8468-48870f82899c.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1659622363765-7be10003-191f-407b-8468-48870f82899c.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）React DnD</strong><br />React DnD是 React 和 Redux 核心作者 Dan Abramov 创造的一组React 高阶组件，可帮助我们构建复杂的拖放界面，同时保持组件解耦。它可以在应用程序的不同部分之间通过拖动传输数据，并且组件会更改其外观和应用状态以响应拖放事件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622410709-79d963e3-7d2c-4724-9cd5-c0a4c150ee33.png?x-oss-process=image/resize,w_949,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622410709-79d963e3-7d2c-4724-9cd5-c0a4c150ee33.png?x-oss-process=image/resize,w_949,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）React Draggable</strong><br />React-Draggable 库简单易用，将 CSS 中的 transform 应用于 React 组件，允许我们在 UI 中拖动组件。它有不同的 props 可以让你改变组件的行为，是创建直观、用户友好界面的绝佳选择。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1659622440946-bcf078ea-7c9b-4e03-b2b0-f815bf7efc52.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1659622440946-bcf078ea-7c9b-4e03-b2b0-f815bf7efc52.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>18、国际化</strong><br /><strong>（1）React Intl</strong><br />React Intl 提供了一个 React 组件和用于国际化 React Web 应用的 Mixin。它提供一个格式化日期、数字、字符串消息的描述方式。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622204634-fa5e8142-b1b3-4b07-941b-ee081a71d9c3.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622204634-fa5e8142-b1b3-4b07-941b-ee081a71d9c3.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）React-i18next</strong><br />react-i18next 是基于 i18next 的一款强大的国际化框架，可以用于 react 和 react-native 应用，是目前非常主流的国际化解决方案。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622267896-9b8a351e-3b6a-4bb6-9c9d-8b96043b1bef.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659622267896-9b8a351e-3b6a-4bb6-9c9d-8b96043b1bef.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>19、其他</strong><br /><strong>（1）Reactide</strong><br />Reactide 是首个用于 React Web 应用开发的专用 IDE 。它是一个跨平台的桌面应用程序，提供了一个自定义模拟器，不需要构建工具和服务器配置，开箱即用。 Reactide 将开发带回到打开单个文件的日子，立即在浏览器中呈现项目。 使用 Reactide，开发人员可以使用单个 React JSX 文件实现相同的简单性，同时利用 React 的强大功能。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659601981425-37c0edc9-f522-441a-b212-67215f5e92aa.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659601981425-37c0edc9-f522-441a-b212-67215f5e92aa.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（2）Gatsby</strong><br />Gatsby 是基于 React 构建的静态站点生成器，拥有丰富的插件生态，其主要目标之一是交付访问速度快速的网页，它通过利用良好的缓存、静态页面生成和基于边缘的 CDN 数据源来实现这一目标。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659621812138-36b47366-46e3-4ffd-924b-02ff10f370c9.png?x-oss-process=image/resize,w_930,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659621812138-36b47366-46e3-4ffd-924b-02ff10f370c9.png?x-oss-process=image/resize,w_930,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（3）React Helmet</strong><br />React Helmet是一个HTML文档head管理工具，管理对文档头的所有更改。Helmet采用纯 HTML 标签并输出纯 HTML 标签。它非常简单，而且对 React 初学者友好。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659621458775-7e031028-b8db-4dd5-bafd-937cfaa4e617.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1659621458775-7e031028-b8db-4dd5-bafd-937cfaa4e617.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收藏 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 库</title>
      <link href="/2023/06/27/frontend/collection/vue-ku/"/>
      <url>/2023/06/27/frontend/collection/vue-ku/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658249113976-aac50b99-5921-4a3b-a7e8-0ebadac449dd.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658249113976-aac50b99-5921-4a3b-a7e8-0ebadac449dd.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="SiTly"></a></p><h1 id="1-状态管理"><a href="#1-状态管理" class="headerlink" title="1. 状态管理"></a><br />1. 状态管理</h1><p><a name="fzcN6"></a></p><h2 id="（1）Pinia"><a href="#（1）Pinia" class="headerlink" title="（1）Pinia"></a>（1）Pinia</h2><p>Pinia 是最新一代的 Vue 轻量级状态管理库。它适用于 Vue 2.x 和 Vue 3.x。它是 Vue 官方成员在2019年11月重新设计的一个状态存储库，它允许你跨组件&#x2F;页面共享状态，并且是响应式的，类似于 Vuex。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658240532615-2a0e69d6-67b6-4fc7-86f0-85ede2ca5efc.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658240532615-2a0e69d6-67b6-4fc7-86f0-85ede2ca5efc.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="D8Dnn"></a></p><h2 id="（2）Vuex"><a href="#（2）Vuex" class="headerlink" title="（2）Vuex"></a><br />（2）Vuex</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658240637248-ebca700a-c553-47f0-a1b0-f4c29c182a4b.png?x-oss-process=image/resize,w_957,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658240637248-ebca700a-c553-47f0-a1b0-f4c29c182a4b.png?x-oss-process=image/resize,w_957,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="fBZ7u"></a></p><h2 id="（3）vuex-persist"><a href="#（3）vuex-persist" class="headerlink" title="（3）vuex-persist"></a><br />（3）vuex-persist</h2><p>vuex-persistedstate 是一个支持 Typescript 的Vuex插件，使你能够将应用程序的状态保存到持久存储中，例如 Cookies 或 localStorage。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658241184423-55a6ddf9-29fe-425c-8fe6-6e99b04fe714.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658241184423-55a6ddf9-29fe-425c-8fe6-6e99b04fe714.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="EFDw2"></a></p><h1 id="2-表单"><a href="#2-表单" class="headerlink" title="2. 表单"></a><br />2. 表单</h1><p><a name="Hl6Xo"></a></p><h2 id="（1）VeeValidate"><a href="#（1）VeeValidate" class="headerlink" title="（1）VeeValidate"></a>（1）VeeValidate</h2><p>vee-validate 是Vue.js的表单验证库，它允许验证输入并以熟悉的声明式样式或使用组合函数构建更好的表单 UI。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244322020-a5806224-d508-42c7-b040-dcf5a2f227b4.png?x-oss-process=image/resize,w_952,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244322020-a5806224-d508-42c7-b040-dcf5a2f227b4.png?x-oss-process=image/resize,w_952,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="OkqPQ"></a></p><h2 id="（2）vue-form-making"><a href="#（2）vue-form-making" class="headerlink" title="（2）vue-form-making"></a><br />（2）vue-form-making</h2><p>vue-form-making 是一个基于 vue 和 element-ui 实现的可视化表单设计器，使用了最新的前端技术栈，内置了 i18n 国际化解决方案，可以让表单开发简单而高效。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244554598-4310d3e7-3091-4310-9c3b-70e5de91317b.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244554598-4310d3e7-3091-4310-9c3b-70e5de91317b.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="vMXrC"></a></p><h2 id="（3）FormKit"><a href="#（3）FormKit" class="headerlink" title="（3）FormKit"></a><br />（3）FormKit</h2><p>FormKit 是一个面向 Vue 开发人员的表单创作框架，它使构建高质量的生产就绪表单的速度提高了 10 倍。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244690324-e745f913-a5f9-47e2-854f-9bae60ecef5f.png?x-oss-process=image/resize,w_954,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244690324-e745f913-a5f9-47e2-854f-9bae60ecef5f.png?x-oss-process=image/resize,w_954,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="iYuba"></a></p><h1 id="3-文档"><a href="#3-文档" class="headerlink" title="3. 文档"></a><br />3. 文档</h1><p><a name="diAh4"></a></p><h2 id="（1）VitePress"><a href="#（1）VitePress" class="headerlink" title="（1）VitePress"></a>（1）VitePress</h2><p>VitePress 是 VuePress 的继承者，建立在vite 之上。目前，正处于alpha阶段。它已经适合开箱即用的文档使用，但配置和主题 API 可能仍会在次要版本之间发生变化。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658241882514-095613ba-77a2-4793-9c49-b5a3dd9d0045.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658241882514-095613ba-77a2-4793-9c49-b5a3dd9d0045.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="rI8Zb"></a></p><h2 id="（2）VuePress"><a href="#（2）VuePress" class="headerlink" title="（2）VuePress"></a>（2）VuePress</h2><p>VuePress 是一个基于 Vue 的轻量级静态网站生成器，以及为编写技术文档而优化的默认主题。 它是为了满足 Vue 自己的子项目文档的需求而创建的。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658241791565-51890648-63e4-47bc-8581-479e5a4aeafc.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658241791565-51890648-63e4-47bc-8581-479e5a4aeafc.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="S7MNQ"></a></p><h2 id="（3）Gridsome"><a href="#（3）Gridsome" class="headerlink" title="（3）Gridsome"></a>（3）Gridsome</h2><p>Gridsome 是一个基于 Vue.js 构建的 Jamstack 框架，它让开发人员可以轻松地构建静态生成的网站和应用程序，这些网站和应用程序天生速度快。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658247087501-fe2c275f-e7be-4011-8618-6e3f6da4ac9b.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658247087501-fe2c275f-e7be-4011-8618-6e3f6da4ac9b.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="KD3jT"></a></p><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a><br />4. 测试</h1><p><a name="dyNRp"></a></p><h2 id="（1）Vitest"><a href="#（1）Vitest" class="headerlink" title="（1）Vitest"></a>（1）Vitest</h2><p>Vitest 是一个由 Vite 提供支持的极速单元测试框架。其和 Vite 的配置、转换器、解析器和插件保持一致，具有开箱即用的 TypeScript &#x2F; JSX 支持。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658242281270-7d006534-6f79-48cc-ac3a-1ab58b1af72e.png?x-oss-process=image/resize,w_954,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658242281270-7d006534-6f79-48cc-ac3a-1ab58b1af72e.png?x-oss-process=image/resize,w_954,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="lvZ5P"></a></p><h2 id="（2）Jest"><a href="#（2）Jest" class="headerlink" title="（2）Jest"></a><br />（2）Jest</h2><p>Jest 是一个全面的 JavaScript 测试解决方案，专注于简洁明快。适用于大多数 JavaScript 项目。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658242600801-d9bcf342-7c55-426c-8694-4da4b9653686.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658242600801-d9bcf342-7c55-426c-8694-4da4b9653686.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="ebERg"></a></p><h2 id="（3）Mocha"><a href="#（3）Mocha" class="headerlink" title="（3）Mocha"></a><br />（3）Mocha</h2><p>mocha是一个功能丰富的javascript测试框架，运行在node.js和浏览器中，使异步测试变得简单有趣。Mocha测试连续运行，允许灵活和准确的报告，同时将未捕获的异常映射到正确的测试用例。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658242834462-44236ea1-0527-46b9-8ecb-e51ad65ef5ad.png?x-oss-process=image/resize,w_945,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658242834462-44236ea1-0527-46b9-8ecb-e51ad65ef5ad.png?x-oss-process=image/resize,w_945,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="GkI1w"></a></p><h1 id="5-可视化"><a href="#5-可视化" class="headerlink" title="5. 可视化"></a><br />5. 可视化</h1><p><a name="WHM2e"></a></p><h2 id="（1）Vue-ChartJS"><a href="#（1）Vue-ChartJS" class="headerlink" title="（1）Vue ChartJS"></a>（1）Vue ChartJS</h2><p>vue-chartjs 是一个 Vue 对于 Chart.js 的封装，让用户可以在Vue中轻松使用Chart.js，很简单的创建可复用的图表组件，非常适合需要简单的图表并尽可能快地运行的人。 vue-chartjs抽象了基本逻辑，同时也暴露了Chart.js对象，让用户获得最大的灵活性。它支持 Vue 3 和 Vue 2。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658243328737-ef5294c0-4185-41a0-9567-421c5f583e29.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658243328737-ef5294c0-4185-41a0-9567-421c5f583e29.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="KuLA0"></a></p><h2 id="（2）Apache-ECharts"><a href="#（2）Apache-ECharts" class="headerlink" title="（2）Apache ECharts"></a><br />（2）Apache ECharts</h2><p>Apache ECharts 是一款基于Javascript的数据可视化图表库，提供直观，生动，可交互，可个性化定制的数据可视化图表。它是用纯 JavaScript 编写的，基于zrender，是一个全新的轻量级画布库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658243634219-bdf272dd-a253-4d6d-9eca-bc1dd0292d32.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658243634219-bdf272dd-a253-4d6d-9eca-bc1dd0292d32.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="rqUhQ"></a></p><h2 id="（3）Vue-ECharts"><a href="#（3）Vue-ECharts" class="headerlink" title="（3）Vue-ECharts"></a><br />（3）Vue-ECharts</h2><p>Vue-ECharts 是 Apache ECharts 的 Vue.js 组件。使用 Apache ECharts 5，同时支持 Vue.js 2&#x2F;3。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658243888856-bb73498b-d853-43a7-b10a-e1c2e1fd0e28.png?x-oss-process=image/resize,w_959,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658243888856-bb73498b-d853-43a7-b10a-e1c2e1fd0e28.png?x-oss-process=image/resize,w_959,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="NHWLF"></a></p><h2 id="（4）Trois"><a href="#（4）Trois" class="headerlink" title="（4）Trois"></a><br />（4）Trois</h2><p>Trois 是一个基于 Three.JS 的 Vue 3 可视化库，它是一个流行的 WebGL 库。 Three.JS 对桌面和移动设备都有很好的支持。 该库允许我们使用 VueJS 组件轻松为网站创建 3D 效果。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658245369189-f6e12dc5-63a8-436a-829d-5832407e4054.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658245369189-f6e12dc5-63a8-436a-829d-5832407e4054.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="LCfns"></a></p><h1 id="6-组件"><a href="#6-组件" class="headerlink" title="6. 组件"></a><br />6. 组件</h1><p><a name="CZ9Hk"></a></p><h2 id="（1）Vue-Grid-Layout"><a href="#（1）Vue-Grid-Layout" class="headerlink" title="（1）Vue Grid Layout"></a>（1）Vue Grid Layout</h2><p>vue-grid-layout 是一个网格布局系统，类似于 Gridster，用于 Vue.js。 <br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244016211-ff1879e4-67aa-4b8c-b66c-4a4a8527bd09.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244016211-ff1879e4-67aa-4b8c-b66c-4a4a8527bd09.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="WblsY"></a></p><h2 id="（2）Vue-Draggable"><a href="#（2）Vue-Draggable" class="headerlink" title="（2）Vue Draggable"></a><br />（2）Vue Draggable</h2><p>Vue Draggable 是一个基于 Sortable.js 的 Vue 拖拽组件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244136335-2177ad07-f931-4128-b3b6-759d17f87f5d.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244136335-2177ad07-f931-4128-b3b6-759d17f87f5d.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="yejts"></a></p><h2 id="（3）Vue-Tour"><a href="#（3）Vue-Tour" class="headerlink" title="（3）Vue Tour"></a><br />（3）Vue Tour</h2><p>Vue Tour 是一个轻量级、简单且可定制的导览插件，可与 Vue.js 一起使用。它提供了一种快速简便的方法来指导用户完成你的应用程序。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244866751-55d7e307-be4d-458e-8728-68e668d16875.png?x-oss-process=image/resize,w_953,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244866751-55d7e307-be4d-458e-8728-68e668d16875.png?x-oss-process=image/resize,w_953,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>（4）Swiper.js</strong><br />Swiper 是一款免费以及轻量级的移动设备触控滑块的框架，使用硬件加速过渡。主要使用与移动端的网站、网页应用程序，以及原生的应用程序。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244941098-1d009d31-ee3e-4ddb-a30d-47084d4fdc87.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658244941098-1d009d31-ee3e-4ddb-a30d-47084d4fdc87.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="AEitf"></a></p><h2 id="（5）vue-easytable"><a href="#（5）vue-easytable" class="headerlink" title="（5）vue-easytable"></a><br />（5）vue-easytable</h2><p>该库提供了一个功能齐全且高度可定制的表格组件&#x2F;数据网格。它支持许多功能，如虚拟滚动、列固定、标题固定、标题分组、过滤器、排序、单元格省略号、行扩展、行复选框等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658246173207-b8a6cdb5-ba20-4cfa-a43e-d6ab58cd817a.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658246173207-b8a6cdb5-ba20-4cfa-a43e-d6ab58cd817a.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="ymS5x"></a></p><h1 id="7-UI-组件"><a href="#7-UI-组件" class="headerlink" title="7. UI 组件"></a><br />7. UI 组件</h1><p><a name="YPNro"></a></p><h2 id="（1）Element-Plus"><a href="#（1）Element-Plus" class="headerlink" title="（1）Element Plus"></a>（1）Element Plus</h2><p>Element Plus，由饿了么大前端团队开源出品的一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的组件库，Element Plus 是基于 Vue3 面向设计师和开发者的组件库，提供了配套设计资源，帮助你的网站快速成型。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658236849005-d22c295f-4efa-4bab-aeb7-e845a79840cd.png?x-oss-process=image/resize,w_780,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658236849005-d22c295f-4efa-4bab-aeb7-e845a79840cd.png?x-oss-process=image/resize,w_780,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="OvSFU"></a></p><h2 id="（2）Vuetify"><a href="#（2）Vuetify" class="headerlink" title="（2）Vuetify"></a>（2）Vuetify</h2><p>Vuetify 是一个基于 Vue.js 精心打造 UI 组件库，整套 UI 设计为 Material 风格。能够让没有任何设计技能的开发者创造出时尚的 Material 风格界面。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658236907279-ca0790f0-a9da-4b06-9a05-aacda6929c5a.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658236907279-ca0790f0-a9da-4b06-9a05-aacda6929c5a.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="yf71Z"></a></p><h2 id="（3）Vant"><a href="#（3）Vant" class="headerlink" title="（3）Vant"></a><br />（3）Vant</h2><p>Vant 是一套轻量、可靠的移动端组件库。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率，支持 Vue 3。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658237411801-6a82c357-2294-4489-8652-d0d7152f8333.png?x-oss-process=image/resize,w_955,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658237411801-6a82c357-2294-4489-8652-d0d7152f8333.png?x-oss-process=image/resize,w_955,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="l6DSl"></a></p><h2 id="（4）Naive-UI"><a href="#（4）Naive-UI" class="headerlink" title="（4）Naive UI"></a><br />（4）Naive UI</h2><p>Naive UI 是一款基于当前比较新的 Vue 3.0&#x2F;TypeScript 技栈开发的前端 UI 组件库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658237717771-66f44c93-f6de-432a-8fea-74ac4f4c2a1c.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658237717771-66f44c93-f6de-432a-8fea-74ac4f4c2a1c.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="EWKvZ"></a></p><h1 id="8-动画"><a href="#8-动画" class="headerlink" title="8. 动画"></a><br />8. 动画</h1><p><a name="RlDbD"></a></p><h2 id="（1）Animate-css"><a href="#（1）Animate-css" class="headerlink" title="（1）Animate.css"></a>（1）Animate.css</h2><p>animate.css 是一个使用CSS3的animation制作的动画效果的CSS集合，里面预设了很多种常用的动画，且使用非常简单。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658237855634-9e42760e-330e-4174-9672-31fd389f0b40.png?x-oss-process=image/resize,w_957,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658237855634-9e42760e-330e-4174-9672-31fd389f0b40.png?x-oss-process=image/resize,w_957,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="zAOTJ"></a></p><h2 id="（2）Greensock"><a href="#（2）Greensock" class="headerlink" title="（2）Greensock"></a><br />（2）Greensock</h2><p>GreenSock是一个JavaScript动画库，可轻松对HTML元素进行动画处理。 用于创建高性能，零依赖性，跨浏览器动画，声称在超过 400 万个网站中使用。 <br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238145678-e4baca0c-0a7d-45be-8741-246abfb71bbe.png?x-oss-process=image/resize,w_795,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238145678-e4baca0c-0a7d-45be-8741-246abfb71bbe.png?x-oss-process=image/resize,w_795,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="FyOdE"></a></p><h2 id="（3）Popmotion"><a href="#（3）Popmotion" class="headerlink" title="（3）Popmotion"></a><br />（3）Popmotion</h2><p>Popmotion 是一个只有12KB的 JavaScript 运动引擎，可以用来实现动画，物理效果和输入跟踪。原生的DOM支持：CSS，SVG，SVG路径和DOM属性的支持，开箱即用。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238362468-c97fe309-02bc-4cfe-8818-601d03e0ac8d.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238362468-c97fe309-02bc-4cfe-8818-601d03e0ac8d.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="Uo62F"></a></p><h2 id="（4）Vue-Kinesis"><a href="#（4）Vue-Kinesis" class="headerlink" title="（4）Vue Kinesis"></a><br />（4）Vue Kinesis</h2><p>Vue Kinesis 支持使用 Vue.js 轻松创建复杂的交互式动画，其支持 Vue 3。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238626259-c41830ba-7488-4d4b-bdad-afeb51426550.png?x-oss-process=image/resize,w_957,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238626259-c41830ba-7488-4d4b-bdad-afeb51426550.png?x-oss-process=image/resize,w_957,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="Ptqhj"></a></p><h1 id="9-图标"><a href="#9-图标" class="headerlink" title="9. 图标"></a><br />9. 图标</h1><p><a name="Mrqcu"></a></p><h2 id="（1）IconPark"><a href="#（1）IconPark" class="headerlink" title="（1）IconPark"></a>（1）IconPark</h2><p>IconPark 提供超过 2400 个高质量图标，还提供了每个图标的含义和来源的描述，便于开发者使用。除此之外，该网站还可以自定义图标，这是与其他图标网站与众不同的地方。该图标库是字节跳动旗下的技术驱动图标样式的开源图标库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238892165-34d2445d-91f9-4184-8b2b-6a6f1a1b24e2.png?x-oss-process=image/resize,w_959,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238892165-34d2445d-91f9-4184-8b2b-6a6f1a1b24e2.png?x-oss-process=image/resize,w_959,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="wrSdh"></a></p><h2 id="（2）Font-Awesome"><a href="#（2）Font-Awesome" class="headerlink" title="（2）Font Awesome"></a><br />（2）Font Awesome</h2><p>Font Awesome 提供了可缩放的矢量图标，可以使用CSS所提供的所有特性对它们进行更改，包括：大小、颜色、阴影或者其它任何支持的效果。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238892145-d72b28e0-8701-464e-b691-8b938b91fdc2.png?x-oss-process=image/resize,w_838,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238892145-d72b28e0-8701-464e-b691-8b938b91fdc2.png?x-oss-process=image/resize,w_838,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="NXs0v"></a></p><h2 id="（3）Ionicons"><a href="#（3）Ionicons" class="headerlink" title="（3）Ionicons"></a><br />（3）Ionicons</h2><p>Ionicons 是一个完全开源的图标集，是知名混合开发框架 Ionic Framework 内置的图标库，包含 1300 个设计优雅、风格统一的高质量图标，能满足大多数的业务场景。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238892220-50e3abe8-88ce-4cb5-a169-5852a9168ea0.png?x-oss-process=image/resize,w_792,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238892220-50e3abe8-88ce-4cb5-a169-5852a9168ea0.png?x-oss-process=image/resize,w_792,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="Ytpi7"></a></p><h2 id="（4）Bootstrap-Icons"><a href="#（4）Bootstrap-Icons" class="headerlink" title="（4）Bootstrap Icons"></a><br />（4）Bootstrap Icons</h2><p>Bootstrap Icons 是 Bootstrap 开源的 SVG 图标库，此图标库起初专门针对其组件（从表单控件到导航）和文档进行定制设计和构建，现在可以免费用于任何项目。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238892194-7bb1c0dd-f6e3-4acc-a42b-d81066841b10.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658238892194-7bb1c0dd-f6e3-4acc-a42b-d81066841b10.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="bSFKx"></a></p><h1 id="10-富文本编辑器"><a href="#10-富文本编辑器" class="headerlink" title="10. 富文本编辑器"></a><br />10. 富文本编辑器</h1><p><a name="ugxR9"></a></p><h2 id="（1）Tiptap"><a href="#（1）Tiptap" class="headerlink" title="（1）Tiptap"></a>（1）Tiptap</h2><p>Tiptap 是一个基于 Vue 的无渲染的富文本编辑器，它基于 Prosemirror，完全可扩展且无渲染。可以轻松地将自定义节点添加为Vue组件。使用无渲染组件（函数式组件），几乎完全控制标记和样式。菜单的外观或在DOM中的显示位置。这完全取决于使用者。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658239070542-7d1881e5-6895-48e3-835b-60347593c1e7.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658239070542-7d1881e5-6895-48e3-835b-60347593c1e7.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="iKndu"></a></p><h2 id="（2）Quill-js"><a href="#（2）Quill-js" class="headerlink" title="（2）Quill.js"></a><br />（2）Quill.js</h2><p>Quill.js 是一个具有跨平台和跨浏览器支持的富文本编辑器。凭借其可扩展架构和富有表现力的 API，可以完全自定义它以满足个性化的需求。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658239127493-66aaeb22-6fe3-4efb-a41d-36f444b8137f.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658239127493-66aaeb22-6fe3-4efb-a41d-36f444b8137f.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="JszhF"></a></p><h2 id="（3）TinyMCE"><a href="#（3）TinyMCE" class="headerlink" title="（3）TinyMCE"></a><br />（3）TinyMCE</h2><p>TinyMCE 是一个热门的富文本编辑器。它的目标是帮助其他开发人员构建精美的 Web 内容解决方案。它易于集成，可以部署在基于云的、自托管或混合环境中。该设置使得合并诸如 Angular、React 和 Vue 等框架成为可能。它还可以使用 50 多个插件进行扩展，每个插件都有 100 多个自定义选项。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658239167968-a3ca0fe5-d35a-404f-968c-5a78c8ab6ac9.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658239167968-a3ca0fe5-d35a-404f-968c-5a78c8ab6ac9.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="srS3i"></a></p><h2 id="（4）CKEditor-5"><a href="#（4）CKEditor-5" class="headerlink" title="（4）CKEditor 5"></a><br />（4）CKEditor 5</h2><p>CKEditor 是一个强大的富文本编辑器框架，具有模块化架构、现代集成和协作编辑等功能。它可以通过基于插件的架构进行扩展，从而可以将必要的内容处理功能引入。它是在 ES6 中从头开始编写的，并且具有出色的 webpack支持。可以使用与Angular、React和Vue.js的原生集成。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658239213415-71bfed0f-d331-471a-bacc-beecf4548811.png?x-oss-process=image/resize,w_853,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658239213415-71bfed0f-d331-471a-bacc-beecf4548811.png?x-oss-process=image/resize,w_853,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="RoXN9"></a></p><h1 id="11-服务端渲染"><a href="#11-服务端渲染" class="headerlink" title="11. 服务端渲染"></a><br />11. 服务端渲染</h1><p><a name="o4GBT"></a></p><h2 id="（1）Nuxt-js"><a href="#（1）Nuxt-js" class="headerlink" title="（1）Nuxt.js"></a>（1）Nuxt.js</h2><p>Nuxt.js 是一个基于 Vue.js 的通用应用框架。通过对客户端&#x2F;服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 UI 渲染。它预设了利用 Vue.js 开发服务端渲染的应用所需要的各种配置。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658239456606-2e79a410-44dc-4551-a754-03d333d79615.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658239456606-2e79a410-44dc-4551-a754-03d333d79615.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="iTCSa"></a></p><h2 id="（2）SSR"><a href="#（2）SSR" class="headerlink" title="（2）SSR"></a><br />（2）SSR</h2><p>ssr 框架是为前端框架在服务端渲染的场景下所打造的开箱即用的服务端渲染框架。面向 Serverless，同时支持 React，Vue2，Vue3。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658240199585-5d031fd6-2d20-4c2a-b798-e362be63c7fe.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658240199585-5d031fd6-2d20-4c2a-b798-e362be63c7fe.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="FTEyM"></a></p><h2 id="（3）Vue-meta"><a href="#（3）Vue-meta" class="headerlink" title="（3）Vue-meta"></a><br />（3）Vue-meta</h2><p>Vue-meta 是 Vue.js 的一个插件，它可以帮助你使用 SSR 支持管理 Vue.js 组件中的 HTML 元数据。Vue-meta 使用 Vue 的内置响应性使管理应用程序的元数据变得简单。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658243064630-bf87b19d-815b-46ee-a47e-5f90e287c24f.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658243064630-bf87b19d-815b-46ee-a47e-5f90e287c24f.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="G8zrq"></a></p><h1 id="12-数据获取"><a href="#12-数据获取" class="headerlink" title="12. 数据获取"></a><br />12. 数据获取</h1><p><a name="bGEpO"></a></p><h2 id="（1）Axios"><a href="#（1）Axios" class="headerlink" title="（1）Axios"></a>（1）Axios</h2><p>Axios 是一个基于promise 的网络请求库，作用于node.js和浏览器中。 <br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658245855529-91574ed1-2434-414f-a13e-1b3c1e7fee43.png?x-oss-process=image/resize,w_952,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658245855529-91574ed1-2434-414f-a13e-1b3c1e7fee43.png?x-oss-process=image/resize,w_952,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="uCWIU"></a></p><h2 id="（2）vue-resource"><a href="#（2）vue-resource" class="headerlink" title="（2）vue-resource"></a><br />（2）vue-resource</h2><p>vue-resource是 Vue.js 的一款插件，它可以通过XMLHttpRequest或JSONP发起请求并处理响应。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658245988797-334b4815-9a67-49f9-bfe8-04254a81f0e1.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658245988797-334b4815-9a67-49f9-bfe8-04254a81f0e1.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="s2XtZ"></a></p><h2 id="（3）vue-axios"><a href="#（3）vue-axios" class="headerlink" title="（3）vue-axios"></a><br />（3）vue-axios</h2><p>vue-axios 是一个将 axios 集成到 Vuejs 的小型库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658246069841-a1466034-acb2-4a66-ac9b-c1ec926ab7e8.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658246069841-a1466034-acb2-4a66-ac9b-c1ec926ab7e8.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="NEJk1"></a></p><h1 id="13-构建工具"><a href="#13-构建工具" class="headerlink" title="13. 构建工具"></a><br />13. 构建工具</h1><p><a name="TmHvW"></a></p><h2 id="（1）Vite"><a href="#（1）Vite" class="headerlink" title="（1）Vite"></a>（1）Vite</h2><p>Vite 是下一代前端开发与构建工具。Vite 意在提供开箱即用的配置，同时它的插件 API 和 JavaScript API 带来了高度的可扩展性，并有完整的类型支持。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658246353785-4aecbd73-e51a-482f-b3aa-eceed2a3ee78.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658246353785-4aecbd73-e51a-482f-b3aa-eceed2a3ee78.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="h8UOM"></a></p><h2 id="（2）Webpack"><a href="#（2）Webpack" class="headerlink" title="（2）Webpack"></a><br />（2）Webpack</h2><p>webpack 是一个用于现代JavaScript应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个依赖图(dependency graph)，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 bundle。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658246649786-ce029da9-a405-4cf9-98ab-e317cd8a4a6e.png?x-oss-process=image/resize,w_949,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658246649786-ce029da9-a405-4cf9-98ab-e317cd8a4a6e.png?x-oss-process=image/resize,w_949,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收藏 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动画库</title>
      <link href="/2023/06/27/frontend/collection/dong-hua-ku/"/>
      <url>/2023/06/27/frontend/collection/dong-hua-ku/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>很多时候我们在开发前端页面时都会做一些动画效果来提升用户体验度和页面美观度，所以今天就来给大家推荐几个好用的JavaScript动画库，希望对各位小伙伴有所帮助！</p><p><a name="Z7TS0"></a></p><h1 id="Animate-css"><a href="#Animate-css" class="headerlink" title="Animate.css"></a>Animate.css</h1><p>animate.css 是一个使用CSS3的animation制作的动画效果的CSS集合，里面预设了很多种常用的动画，且使用非常简单。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643079212742-891d0237-e517-421b-9a94-444861644415.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643079212742-891d0237-e517-421b-9a94-444861644415.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="aYbml"></a></p><h1 id="Hover-css"><a href="#Hover-css" class="headerlink" title="Hover.css"></a><br />Hover.css</h1><p>Hover.css 是一套基于 CSS3 的鼠标悬停效果和动画，这些可以非常轻松的被应用到按钮、LOGO 以及图片等元素。所有这些效果都是只需要单一的标签，必要的时候使用 before 和 after 伪元素。因为使用了 CSS3 过渡、转换和动画效果，因此只支持 Chrome、Firefox 和 Safari 等现代浏览器。 <br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643885334717-b36150c7-6d61-4b57-b90f-38a7bce71cc7.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643885334717-b36150c7-6d61-4b57-b90f-38a7bce71cc7.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="bFOsx"></a></p><h1 id="Magic-css"><a href="#Magic-css" class="headerlink" title="Magic.css"></a><br />Magic.css</h1><p>Magic CSS3 Animations 动画是一款独特的CSS3动画特效包，可以自由地使用在网页中。只需简单的在页面上引入 CSS 文件: magic.css 或者压缩版本 magic.min.css 就可以使用了。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643885435396-2b5df028-041d-49b2-b136-de4214626b75.png?x-oss-process=image/resize,w_957,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643885435396-2b5df028-041d-49b2-b136-de4214626b75.png?x-oss-process=image/resize,w_957,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="wGOZ6"></a></p><h1 id="React-Spring"><a href="#React-Spring" class="headerlink" title="React Spring"></a><br />React Spring</h1><p>react-spring 是一个基于弹簧物理学的动画库，满足大多数与UI相关的动画需求，提供了足够灵活的工具，可以自信地将想法投射到不断变化的界面中。该库代表了一种现代动画方法。它继承了 animated 强大的插值和性能，以及 react-motion 的易用性。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643878102964-52cd623b-075c-4c0a-8eea-08e53a5b6922.png?x-oss-process=image/resize,w_957,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643878102964-52cd623b-075c-4c0a-8eea-08e53a5b6922.png?x-oss-process=image/resize,w_957,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="AxzNH"></a></p><h1 id="React-Reveal"><a href="#React-Reveal" class="headerlink" title="React Reveal"></a><br />React Reveal</h1><p>React Reveal 是一个用于 React 的高性能动画库。它占用空间小，专门为 ES6 中的 React 编写。可用于创建各种炫酷的滚动效果显示。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643878159451-b74c722e-4448-4035-8248-b15890802718.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643878159451-b74c722e-4448-4035-8248-b15890802718.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="UAcIs"></a></p><h1 id="Greensock"><a href="#Greensock" class="headerlink" title="Greensock"></a><br />Greensock</h1><p>GreenSock是一个JavaScript动画库，可轻松对HTML元素进行动画处理。 用于创建高性能，零依赖性，跨浏览器动画，声称在超过 400 万个网站中使用。 其具有一下特点：<br />●速度快，专门优化了动画性能，使之实现和css一样的高性能动画效果。<br />●轻量与模块化。模块化与插件式的结构保持了核心引擎的轻量，TweenLite包非常小(基本上低于7kb)。提供了TweenLite, TimelineLite, TimelineMax 和 TweenMax不同功能的动画模块，你可以按需使用。<br />●没有依赖。<br />●灵活控制。不用受限于线性序列，可以重叠动画序列，可以通过精确时间控制，灵活地使用最少的代码实现动画。<br />●任何对象都可以实现动画。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643878632425-50cff842-d447-4a33-8aa8-123d55826940.png?x-oss-process=image/resize,w_795,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643878632425-50cff842-d447-4a33-8aa8-123d55826940.png?x-oss-process=image/resize,w_795,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="EMS0s"></a></p><h1 id="Velocity-js"><a href="#Velocity-js" class="headerlink" title="Velocity.js"></a><br />Velocity.js</h1><p>Velocity.js 是velocity模板语法的javascript实现。Velocity 是基于Java的模板引擎，广泛应用在阿里集 体各个子公司。Velocity模板适用于大量模板使用的场景，支持复杂的逻辑运算，包含 本数据类型、变量赋值和函数等功能。还拥有：<strong>颜色动画</strong>、<strong>转换动画(transforms)<strong>、</strong>循环</strong>、 <strong>缓动</strong>、<strong>SVG 动画</strong>、和 <strong>滚动动画</strong> 等特色功能。Velocity.js 支持 Node.js 和浏览器环境。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643878973365-30359de7-cb34-46ca-a66d-ceb270bcadfc.png?x-oss-process=image/resize,w_794,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643878973365-30359de7-cb34-46ca-a66d-ceb270bcadfc.png?x-oss-process=image/resize,w_794,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br />其具有以下特点：<br />●支持客户端和服务器端使用<br />●语法是富逻辑的，构成门微型的语言<br />●语法分析和模板渲染分离<br />●基本完全支持velocity语法<br />●浏览器使用支持模板之间相互引用，依据kissy模块加载机制</p><p>GitHub：<a href="http://github.com/julianshapiro/velocity">http://github.com/julianshapiro/velocity</a><br><a name="OkC3t"></a></p><h1 id="Lax-js"><a href="#Lax-js" class="headerlink" title="Lax.js"></a><br />Lax.js</h1><p>Lax.js 是一款原生零依赖的制作跟随页面滑动的 JavaScript 动画插件，这款插件非常的轻巧，压缩版大小只有3kb。当滑动页面时，帮助创建酷炫的动画效果，比如滚动视差、变形移动等基本的动画效果，响应式兼容方面，比如手机端也有不错的支持。除了可以使用插件默认集成的动画属性，还可以自定义更加丰富的动画属性。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1643884980168-b3a8b0a1-c68e-4baa-a312-a0b38980223e.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1643884980168-b3a8b0a1-c68e-4baa-a312-a0b38980223e.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="E1iPL"></a></p><h1 id="Rellax-js"><a href="#Rellax-js" class="headerlink" title="Rellax.js"></a><br />Rellax.js</h1><p>rellax.js是一款轻量级的纯JavaScript滚动视觉差特效插件。rellax.js压缩后的版本仅871字节，在手机等小屏幕设备中，插件会自动限制视觉差特性。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643880381677-c0de007d-aa39-4a29-af21-bebebb8c939d.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643880381677-c0de007d-aa39-4a29-af21-bebebb8c939d.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="aRJcU"></a></p><h1 id="three-js"><a href="#three-js" class="headerlink" title="three.js"></a><br />three.js</h1><p>three.js 是一个易于使用、轻量级、跨浏览器的通用 JavaScript 3D 库，它是一套基于WebGL 开发出的Javascript 函式库，它提供了比 WebGL 更简单的Javascript API，让开发者能够轻易在浏览器制作 3D 绘图。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643880619524-2e2a1392-ada9-442e-a8bd-ae70c922a005.png?x-oss-process=image/resize,w_957,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643880619524-2e2a1392-ada9-442e-a8bd-ae70c922a005.png?x-oss-process=image/resize,w_957,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="qdhLI"></a></p><h1 id="wow-js"><a href="#wow-js" class="headerlink" title="wow.js"></a><br />wow.js</h1><p>WOW.js 是一款帮助你实现滚动页面时触发CSS 动画效果的插件。它依赖 animate.css，所以它支持 animate.css 多达 60 多种的动画效果，可以改变动画设置喜欢的风格、延迟、长度、偏移和迭代等，能满足各种需求。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643881012619-0815f141-f9ef-4d9e-bdb1-4f42e96a85bc.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643881012619-0815f141-f9ef-4d9e-bdb1-4f42e96a85bc.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="o61TN"></a></p><h1 id="AniJS"><a href="#AniJS" class="headerlink" title="AniJS"></a><br />AniJS</h1><p>AniJS允许我们为网站创建动画样式，而无需任何JavaScript或CSS编码！ 您可以使用简单的<strong>If</strong> - <strong>On</strong> - <strong>Do</strong> - <strong>To</strong>语法用HTML指定所有动画<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643881180295-960b17ec-1a1e-41ec-880b-223d8173a45d.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643881180295-960b17ec-1a1e-41ec-880b-223d8173a45d.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="is0DJ"></a></p><h1 id="Anime-js"><a href="#Anime-js" class="headerlink" title="Anime.js"></a><br />Anime.js</h1><p>Anime.js 是一个轻量的JavaScript 动画库， 拥有简单而强大的API。可对 CSS 属性、 SVG、 DOM 和JavaScript 对象进行动画。它很轻便，gzip压缩完只有9kb左右。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643881400291-d7ddd8b0-062d-4ede-8a58-48d1148fc89b.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643881400291-d7ddd8b0-062d-4ede-8a58-48d1148fc89b.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="uxMR2"></a></p><h1 id="Typed-js"><a href="#Typed-js" class="headerlink" title="Typed.js"></a><br />Typed.js</h1><p>typed.js是一个类型化库，效果是用打字机的方式显示一段话，可以自定义任何字符串、指定显示速度、指定是否循环等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1643881755659-578bbdfb-421c-469a-8e9a-b14afdaf932b.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1643881755659-578bbdfb-421c-469a-8e9a-b14afdaf932b.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="RtNic"></a></p><h1 id="Vivus"><a href="#Vivus" class="headerlink" title="Vivus"></a><br />Vivus</h1><p>Vivus 是一个轻量级的 JavaScript 库（没有依赖项），它允许我们对 SVG 进行动画处理，使它们看起来像是被绘制的。它有多种不同的动画可用，以及创建自定义脚本的选项，以喜欢的任何方式绘制 SVG。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643881836944-f040f549-034b-4f94-a8ae-f20b9fd9b6d7.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643881836944-f040f549-034b-4f94-a8ae-f20b9fd9b6d7.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="pEZse"></a></p><h1 id="Popmotion"><a href="#Popmotion" class="headerlink" title="Popmotion"></a><br />Popmotion</h1><p>Popmotion 是一个只有12KB的 JavaScript 运动引擎，可以用来实现动画，物理效果和输入跟踪。原生的DOM支持：CSS，SVG，SVG路径和DOM属性的支持，开箱即用。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643881986801-afdd8037-d86f-444f-9419-0a0d24f8e864.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643881986801-afdd8037-d86f-444f-9419-0a0d24f8e864.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="un8xH"></a></p><h1 id="Granim-js"><a href="#Granim-js" class="headerlink" title="Granim.js"></a><br />Granim.js</h1><p>granim.js是一个在网页中创建流畅的交互式流体动画的小型JavaScript库，granim.js可以实现各种想要的渐变的动画效果，使网页色彩更加丰富，视觉效果更佳！<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643882236367-0849eaa1-13f6-48fe-b24e-dae0899e1e29.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643882236367-0849eaa1-13f6-48fe-b24e-dae0899e1e29.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="Klkao"></a></p><h1 id="Kute-js"><a href="#Kute-js" class="headerlink" title="Kute.js"></a><br />Kute.js</h1><p>Kute.js 是一个原生的 Javascript 动画引擎，具有优秀的性能和模块化的代码。 它提供了一大堆工具，以帮助创建自定义动画。它提供了易于使用的方法来设置高性能、跨浏览器的动画。 <br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643882340536-aef0dbd9-af05-4f6f-af2b-4ef464551781.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643882340536-aef0dbd9-af05-4f6f-af2b-4ef464551781.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="vXxCT"></a></p><h1 id="Simple-Parallax"><a href="#Simple-Parallax" class="headerlink" title="Simple Parallax"></a><br />Simple Parallax</h1><p>simpleParallax.js 是一个非常简单且小巧的 Vanilla JS 库，可在任何图像上添加视差动画。它因其易用性和可视化渲染而脱颖而出。视差效果直接应用于图像标签，无需使用背景图像。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643882513364-7682c188-5167-4992-a0a8-f5db2754b31c.png?x-oss-process=image/resize,w_959,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643882513364-7682c188-5167-4992-a0a8-f5db2754b31c.png?x-oss-process=image/resize,w_959,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="PWsjk"></a></p><h1 id="Barba-js"><a href="#Barba-js" class="headerlink" title="Barba.js"></a><br />Barba.js</h1><p>Barba.js是一个小（4kb的压缩和压缩），灵活和无依赖的库，可以帮助您创建流畅和平滑的过渡网站的页面。 它可以减少页面之间的延迟，最大限度地减少浏览器HTTP请求并增强用户的Web体验。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643882962879-d2852eea-27fe-4b78-a603-7d8e90eb01cd.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643882962879-d2852eea-27fe-4b78-a603-7d8e90eb01cd.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="ef9oD"></a></p><h1 id="mo-js"><a href="#mo-js" class="headerlink" title="mo.js"></a><br />mo.js</h1><p>Mo.js是一个简洁、高效的图形动画库，拥有流畅的动画和惊人的用户体验，在任何设备上，屏幕密度独立的效果都很好，可以绘制内置的形状或者自定义形状，还可以绘制多个动画，再让它们串联在一起。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1643883159339-05c308ba-8dd2-434e-ba44-eb140943be36.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1643883159339-05c308ba-8dd2-434e-ba44-eb140943be36.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="h7kd5"></a></p><h1 id="Particles-js"><a href="#Particles-js" class="headerlink" title="Particles.js"></a><br />Particles.js</h1><p>Particles.js 一个轻量级的JavaScript库，用来在网页上创建颗粒效果。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643883928603-4d5f3db8-5cb3-427f-8886-0b8489dca50c.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643883928603-4d5f3db8-5cb3-427f-8886-0b8489dca50c.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="ifwc5"></a></p><h1 id="tsParticles"><a href="#tsParticles" class="headerlink" title="tsParticles"></a><br />tsParticles</h1><p>tsParticles可以轻松创建高度可定制的粒子动画并将它们用作网站的动画背景。可用于 React.js、Vue.js（2.x 和 3.x）、Angular、Svelte、jQuery、Preact、Inferno、Solid、Riot 和 Web 组件的现成可用组件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643884168246-4419bbf9-0987-4791-8112-6ea30149d884.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643884168246-4419bbf9-0987-4791-8112-6ea30149d884.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="NFmxd"></a></p><h1 id="Rough-Notation"><a href="#Rough-Notation" class="headerlink" title="Rough Notation"></a><br />Rough Notation</h1><p>Rough Notation是一个小型 JavaScript 库，用于在网页上创建和动画注释。它使用RoughJS 创建手绘的外观和感觉。元素可以用多种不同的样式进行注释。动画持续时间可以配置，或者只是关闭。压缩后的大小仅 3.83kb。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643884317111-7c264d54-b4d2-42a3-aeb4-7f62dd42cd78.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1643884317111-7c264d54-b4d2-42a3-aeb4-7f62dd42cd78.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="d7wV6"></a></p><h1 id="Animate-on-Scroll"><a href="#Animate-on-Scroll" class="headerlink" title="Animate on Scroll"></a><br />Animate on Scroll</h1><p>Animate on Scroll是一个在页面时创建动画的JavaScript动画库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1643884596967-b53dc332-fab0-4580-82d6-fae24ddec22d.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1643884596967-b53dc332-fab0-4580-82d6-fae24ddec22d.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="bGCX6"></a></p><h1 id="Framer-Motion"><a href="#Framer-Motion" class="headerlink" title="Framer Motion"></a><br />Framer Motion</h1><p>Motion 是Framer的 React 的生产就绪运动库。它带来了声明性动画、轻松的布局转换和手势，同时保持了 HTML 和 SVG 语义。Motion 使用强大的手势识别器扩展了 React 的事件系统。它支持悬停、点击、平移和拖动。注意，Motion 需要 React 16.8 或更高版本。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1644295728196-2fb91e5e-841c-4a12-a408-4a157e21ecef.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1644295728196-2fb91e5e-841c-4a12-a408-4a157e21ecef.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="ROnvv"></a></p><h1 id="React-Motion"><a href="#React-Motion" class="headerlink" title="React Motion"></a><br />React Motion</h1><p>React Motion 是一个用于 React 应用程序的动画库，可以轻松创建和实现逼真的动画。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1644296500821-54b8f275-632d-48b4-af76-957aa1c92e88.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1644296500821-54b8f275-632d-48b4-af76-957aa1c92e88.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收藏 </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图标库</title>
      <link href="/2023/06/27/frontend/collection/tu-biao-ku/"/>
      <url>/2023/06/27/frontend/collection/tu-biao-ku/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><a name="uVpIM"></a></p><h1 id="1-IconPark"><a href="#1-IconPark" class="headerlink" title="1. IconPark"></a>1. IconPark</h1><p>IconPark 提供超过 2400 个高质量图标，还提供了每个图标的含义和来源的描述，便于开发者使用。除此之外，该网站还可以自定义图标，这是与其他图标网站与众不同的地方。该图标库是字节跳动旗下的技术驱动图标样式的开源图标库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654763709432-d1005f7c-1be9-468e-a1bd-7c889613ce25.png?x-oss-process=image/resize,w_959,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654763709432-d1005f7c-1be9-468e-a1bd-7c889613ce25.png?x-oss-process=image/resize,w_959,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>Github：</strong><a href="https://github.com/bytedance/iconpark">https://github.com/bytedance/iconpark</a><br><a name="utSN0"></a></p><h1 id="2-Font-Awesome"><a href="#2-Font-Awesome" class="headerlink" title="2. Font Awesome"></a><br />2. Font Awesome</h1><p>Font Awesome 提供了可缩放的矢量图标，可以使用CSS所提供的所有特性对它们进行更改，包括：大小、颜色、阴影或者其它任何支持的效果。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654763943916-4c569392-0c51-4dd5-a9cb-6900270b200d.png?x-oss-process=image/resize,w_838,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654763943916-4c569392-0c51-4dd5-a9cb-6900270b200d.png?x-oss-process=image/resize,w_838,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><strong>Github：</strong><a href="https://github.com/FortAwesome/Font-Awesome">https://github.com/FortAwesome/Font-Awesome</a><br><a name="qcmQV"></a></p><h1 id="3-Ionicons"><a href="#3-Ionicons" class="headerlink" title="3. Ionicons"></a><br />3. Ionicons</h1><p>Ionicons 是一个完全开源的图标集，是知名混合开发框架 Ionic Framework 内置的图标库，包含 1300 个设计优雅、风格统一的高质量图标，能满足大多数的业务场景。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654764121675-69522b19-59b6-4601-af04-26d20ea77eb9.png?x-oss-process=image/resize,w_792,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654764121675-69522b19-59b6-4601-af04-26d20ea77eb9.png?x-oss-process=image/resize,w_792,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="F78kv"></a></p><h1 id="4-Bootstrap-Icons"><a href="#4-Bootstrap-Icons" class="headerlink" title="4. Bootstrap Icons"></a><br />4. Bootstrap Icons</h1><p>Bootstrap Icons 是 Bootstrap 开源的 SVG 图标库，此图标库起初专门针对其组件（从表单控件到导航）和文档进行定制设计和构建，现在可以免费用于任何项目。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654764209164-bcbf319e-661e-4e3d-8099-760a316d24f6.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654764209164-bcbf319e-661e-4e3d-8099-760a316d24f6.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="EN0eS"></a></p><h1 id="5-Unicons"><a href="#5-Unicons" class="headerlink" title="5. Unicons"></a><br />5. Unicons</h1><p>Unicons 是一套收录超过 4500 种图标的图标库，提供 SVG 矢量和图标字型（Iconfont）格式，使用者可以自订每个图标大小、颜色和颜色。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654764499021-c3ec0e41-cb80-4383-bad2-7cc2198a1e54.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654764499021-c3ec0e41-cb80-4383-bad2-7cc2198a1e54.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="nXUx0"></a></p><h1 id="6-Tabler-Icons"><a href="#6-Tabler-Icons" class="headerlink" title="6. Tabler Icons"></a><br />6. Tabler Icons</h1><p>Tabler Icons 是一组超过 1950 个免费的高质量 SVG 图标，可以在 Web 项目中用。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654765090572-586b5285-63e4-4976-9b76-5ce960ac159d.png?x-oss-process=image/resize,w_860,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1654765090572-586b5285-63e4-4976-9b76-5ce960ac159d.png?x-oss-process=image/resize,w_860,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收藏 </tag>
            
            <tag> 图标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拖拽排序库</title>
      <link href="/2023/06/27/frontend/collection/tuo-zhuai-pai-xu-ku/"/>
      <url>/2023/06/27/frontend/collection/tuo-zhuai-pai-xu-ku/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><a name="PhFl1"></a></p><h1 id="1-React-Beautiful-Dnd"><a href="#1-React-Beautiful-Dnd" class="headerlink" title="1. React Beautiful Dnd"></a>1. React Beautiful Dnd</h1><p>react-beautiful-dnd 是一款美观且简单易用的 React 列表拖拽库。其动画效果自然，性能优秀，简洁而强大的 API，易于上手，与标准浏览器的互动性非常好。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1658845658074-c11cf3bf-38e6-40be-a4b4-445c8898d079.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1658845658074-c11cf3bf-38e6-40be-a4b4-445c8898d079.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="NpcJr"></a></p><h1 id="2-Sortable"><a href="#2-Sortable" class="headerlink" title="2. Sortable"></a>2. Sortable</h1><p>Sortable 是一个 JavaScript 拖拽库，用于在现代浏览器和触摸设备上对拖放列表进行重新排序。支持 Meteor、AngularJS、React、Polymer、Vue、Ember、Knockout 和任何 CSS 库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658845354776-d9e504e8-1a16-4a69-b5aa-1d7b458a12be.png?x-oss-process=image/resize,w_778,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658845354776-d9e504e8-1a16-4a69-b5aa-1d7b458a12be.png?x-oss-process=image/resize,w_778,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="SdSue"></a></p><h1 id="3-Dragula"><a href="#3-Dragula" class="headerlink" title="3. Dragula"></a>3. Dragula</h1><p>Dragula 是一个 JavaScript 库，实现了网页上的拖放功能。提供 JavaScript、AngularJS 和 React 版本。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658846116809-5f5ed7f0-2b78-4108-a99c-7f22dc5a6123.png?x-oss-process=image/resize,w_786,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658846116809-5f5ed7f0-2b78-4108-a99c-7f22dc5a6123.png?x-oss-process=image/resize,w_786,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="KMplr"></a></p><h1 id="4-React-DnD"><a href="#4-React-DnD" class="headerlink" title="4. React DnD"></a>4. React DnD</h1><p>React DnD是 React 和 Redux 核心作者 Dan Abramov 创造的一组React 高阶组件，可帮助我们构建复杂的拖放界面，同时保持组件解耦。它可以在应用程序的不同部分之间通过拖动传输数据，并且组件会更改其外观和应用状态以响应拖放事件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658844194608-80d5a46d-2ef5-4f67-9db6-73638e8165a8.png?x-oss-process=image/resize,w_949,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658844194608-80d5a46d-2ef5-4f67-9db6-73638e8165a8.png?x-oss-process=image/resize,w_949,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="cSH6e"></a></p><h1 id="5-Vue-Draggable"><a href="#5-Vue-Draggable" class="headerlink" title="5. Vue.Draggable"></a>5. Vue.Draggable</h1><p>Vue.Draggable 是基于 Sortable.js 的 Vue 拖放组件。它允许拖放和视图模型数组同步，基于并提供 Sortable.js 的所有功能。该库适用于Vue 2，如果想在 Vue 3 中使用该库，可以访问：<a href="https://github.com/SortableJS/vue.draggable.next">https://github.com/SortableJS/vue.draggable.next</a>。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1658845095630-ba6a45c9-fe9b-45cd-8ccf-ea7618a3f069.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1658845095630-ba6a45c9-fe9b-45cd-8ccf-ea7618a3f069.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="wCevg"></a></p><h1 id="6-interact-js"><a href="#6-interact-js" class="headerlink" title="6. interact.js"></a>6. interact.js</h1><p>interact.js 是一个适用于现代浏览器的 JavaScript 拖放库，支持调整大小和多点触控手势，具有惯性和捕捉功能。为了尽可能多地提供控制，它尝试提供一个简单、灵活的API，该 API 提供移动元素所需的所有拖拽API。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658845930134-ecc4b6d9-9195-497c-8a66-a503c4aa8d9f.png?x-oss-process=image/resize,w_933,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1658845930134-ecc4b6d9-9195-497c-8a66-a503c4aa8d9f.png?x-oss-process=image/resize,w_933,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="TwrSp"></a></p><h1 id="7-React-Draggable"><a href="#7-React-Draggable" class="headerlink" title="7. React Draggable"></a>7. React Draggable</h1><p>React-Draggable 库简单易用，将 CSS 中的transform应用于 React 组件，允许我们在 UI 中拖动组件。它有不同的 props 可以让你改变组件的行为，是创建直观、用户友好界面的绝佳选择。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1658844929818-c8bf8b77-056d-4830-bb8c-36fcc966a31f.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1658844929818-c8bf8b77-056d-4830-bb8c-36fcc966a31f.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="GSj3v"></a></p><h1 id="8-React-Sortable-Tree"><a href="#8-React-Sortable-Tree" class="headerlink" title="8. React Sortable Tree"></a>8. React Sortable Tree</h1><p>React Sortable Tree 是一个用于对分层数据进行拖放式可排序表示的React组件。它支持单选多选，鼠标拖拽子集到新合集，模糊搜索等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1658846422180-4a092775-e056-4f74-a4cc-4807f0696dc7.gif" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/gif/1500604/1658846422180-4a092775-e056-4f74-a4cc-4807f0696dc7.gif" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><br /> ]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收藏 </tag>
            
            <tag> 拖拽排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据处理库</title>
      <link href="/2023/06/27/frontend/collection/shu-ju-chu-li/"/>
      <url>/2023/06/27/frontend/collection/shu-ju-chu-li/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663397468320-4d3708fb-1bdc-4a21-8185-2bdfba047021.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663397468320-4d3708fb-1bdc-4a21-8185-2bdfba047021.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="Q7mK7"></a></p><h1 id="1-工具库"><a href="#1-工具库" class="headerlink" title="1. 工具库"></a><br />1. 工具库</h1><p><a name="mqTfI"></a></p><h2 id="（1）Lodash"><a href="#（1）Lodash" class="headerlink" title="（1）Lodash"></a>（1）Lodash</h2><p>Lodash是一个一致性、模块化、高性能、提高开发者效率的JavaScript 实用工具库。Lodash 通过降低 array、number、objects、string 等等的使用难度从而让 JavaScript 变得更简单。 Lodash 的模块化方法，非常适用于：<br />●遍历 array、object 和 string；<br />●对值进行操作和检测；<br />●创建符合功能的函数。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663344960809-61ca2ecc-899f-4bf6-8d82-1b9c39b64427.png?x-oss-process=image/resize,w_956,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663344960809-61ca2ecc-899f-4bf6-8d82-1b9c39b64427.png?x-oss-process=image/resize,w_956,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="UXOpY"></a></p><h2 id="（2）Underscore-js"><a href="#（2）Underscore-js" class="headerlink" title="（2）Underscore.js"></a>（2）Underscore.js</h2><p>Underscore.js 是一个实用的 JavaScript 工具库，它提供了一整套函数式编程的实用功能，但没有扩展任何 JavaScript 内置对象，而是将数据封装在一个自定义对象中。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663345962141-8ba80bde-78a0-4036-8127-75af27fd6d03.png?x-oss-process=image/resize,w_959,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663345962141-8ba80bde-78a0-4036-8127-75af27fd6d03.png?x-oss-process=image/resize,w_959,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="GcNN6"></a></p><h2 id="（3）Ramda"><a href="#（3）Ramda" class="headerlink" title="（3）Ramda"></a>（3）Ramda</h2><p>Ramda 的目标是专门为函数式编程风格而设计，更容易创建函数式 pipeline、且从不改变用户已有数据。Ramda 主要特性如下：<br />●Ramda 强调更加纯粹的函数式风格。数据不变性和函数无副作用是其核心设计理念。这可以帮助你使用简洁、优雅的代码来完成工作。<br />●Ramda 函数本身都是自动柯里化的。这可以让你在只提供部分参数的情况下，轻松地在已有函数的基础上创建新函数。<br />●Ramda 函数参数的排列顺序更便于柯里化。要操作的数据通常在最后面。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663345263357-d4adf726-0169-4b35-9dee-5e7042068097.png?x-oss-process=image/resize,w_959,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663345263357-d4adf726-0169-4b35-9dee-5e7042068097.png?x-oss-process=image/resize,w_959,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="qZBrQ"></a></p><h2 id="（4）Collect-js"><a href="#（4）Collect-js" class="headerlink" title="（4）Collect.js"></a>（4）Collect.js</h2><p>collect.js是 JavaScript 处理数组和对象的方便且无依赖的包装类工具。其提供了常用的数组和集合的操作API，map，reduce，filter 等集合的高级方法，设计灵感来源于 Laravel Collection。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663346140487-27c42d73-9e35-48cd-b719-d4a34fa469fd.png?x-oss-process=image/resize,w_632,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663346140487-27c42d73-9e35-48cd-b719-d4a34fa469fd.png?x-oss-process=image/resize,w_632,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="B51Yr"></a></p><h1 id="2-日期"><a href="#2-日期" class="headerlink" title="2. 日期"></a>2. 日期</h1><p><a name="A8cPr"></a></p><h2 id="（1）date-fns"><a href="#（1）date-fns" class="headerlink" title="（1）date-fns"></a>（1）date-fns</h2><p>date-fns 是一个现代的 JavaScript 日期工具类库，提供了最全面、最简单和一致的工具集，用于在浏览器和 Node.js 中操作 JavaScript 日期。其具有以下特性：<br />●<strong>模块化</strong>：根据需求选择需要引用的模块<br />●<strong>不可变</strong>：date-fns 使用纯函数构建，并且始终返回一个新的日期实例，而不是更改传递的日期实例。它允许防止错误并跳过长时间的调试会话<br />●<strong>可信赖</strong>：遵循语义版本，始终向后兼容<br />●<strong>快速</strong>：轻量快速，为用户提供最佳的使用体验<br />●<strong>TypeScript &amp; Flow</strong>：date-fns 同时支持 Flow 和 TypeScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; format, formatDistance, formatRelative, subDays &#125; <span class="keyword">from</span> <span class="string">&#x27;date-fns&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">format</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&quot;&#x27;Today is a&#x27; eeee&quot;</span>)</span><br><span class="line"><span class="comment">//=&gt; &quot;Today is a Saturday&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">formatDistance</span>(<span class="title function_">subDays</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">3</span>), <span class="keyword">new</span> <span class="title class_">Date</span>(), &#123; <span class="attr">addSuffix</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="comment">//=&gt; &quot;3 days ago&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">formatRelative</span>(<span class="title function_">subDays</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">3</span>), <span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line"><span class="comment">//=&gt; &quot;last Friday at 7:26 p.m.&quot;</span></span><br></pre></td></tr></table></figure><p><br /><strong>Github：</strong><a href="https://github.com/date-fns/date-fns">https://github.com/date-fns/date-fns</a></p><p><a name="JoInD"></a></p><h2 id="（2）Moment-js"><a href="#（2）Moment-js" class="headerlink" title="（2）Moment.js"></a>（2）Moment.js</h2><p>Moment.js 是一个简单易用的轻量级 JavaScript 日期处理类库，提供了日期格式化、解析、验证等功能。它支持在浏览器和 NodeJS 两种环境中运行。此类库能够将给定的任意日期转换成多种不同的格式，具有强大的日期计算功能，同时也内置了能显示多样的日期形式的函数。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663345546273-1a6234fd-3648-4512-8e43-be63227a78a0.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663345546273-1a6234fd-3648-4512-8e43-be63227a78a0.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="e8bFT"></a></p><h2 id="（3）Day-js"><a href="#（3）Day-js" class="headerlink" title="（3）Day.js"></a>（3）Day.js</h2><p>Day.js是一个极简的JavaScript库，可以为现代浏览器解析、验证、操作和显示日期和时间。其具有以下特点：<br />●和 Moment.js 相同的 API 和用法<br />●不可变数据 (Immutable)<br />●支持链式操作 (Chainable)<br />●国际化 I18n<br />●仅 2kb 大小的微型库<br />●全浏览器兼容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">dayjs</span>().<span class="title function_">format</span>();                                     <span class="comment">// 2020-09-08T13:42:32+08:00</span></span><br><span class="line"><span class="title function_">dayjs</span>().<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>);                         <span class="comment">// 2020-09-08</span></span><br><span class="line"><span class="title function_">dayjs</span>().<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);                <span class="comment">// 2020-09-08 13:47:12</span></span><br><span class="line"><span class="title function_">dayjs</span>(<span class="number">1318781876406</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);   <span class="comment">// 2011-10-17 00</span></span><br></pre></td></tr></table></figure><p><br /><strong>Github：</strong><a href="https://github.com/iamkun/dayjs/">https://github.com/iamkun/dayjs/</a></p><p><a name="bCsN7"></a></p><h1 id="3-随机值"><a href="#3-随机值" class="headerlink" title="3. 随机值"></a>3. 随机值</h1><p><a name="jnxxN"></a></p><h2 id="（1）Chance-js"><a href="#（1）Chance-js" class="headerlink" title="（1）Chance.js"></a>（1）Chance.js</h2><p>Chance 是一个轻量级的 JavaScript 随机字符串生成器插件，可帮助减少编写单调的代码，特别是在编写自动化测试时经常需要各种随机内容。可以使用它来产生随机数、字符、字符串、名字、地址、骰子等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663346553258-2cab16aa-ec04-4108-8dae-68ad28cdf65e.png?x-oss-process=image/resize,w_958,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663346553258-2cab16aa-ec04-4108-8dae-68ad28cdf65e.png?x-oss-process=image/resize,w_958,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="zJE0S"></a></p><h2 id="（2）UUID"><a href="#（2）UUID" class="headerlink" title="（2）UUID"></a>（2）UUID</h2><p>UUID 是一个用于在 JavaScript 中生成符合 RFC 的 UUID 的实用程序库。其具有以下特点：<br />●<strong>完整</strong>：支持 RFC4122 版本 1、3、4 和 5 UUID<br />●<strong>跨平台</strong>：支持CommonJS、ECMAScript 模块和 CDN 构建；Node 12, 14, 16, 18；Chrome、Safari、Firefox、Edge 浏览器；Webpack 和 rollup.js 模块打包工具；<br />●<strong>安全</strong>：加密强度高的随机值<br />●<strong>体积小</strong>：零依赖，占用空间小<br />●<strong>CLI</strong>：包括 uuid 命令行实用程序<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663346948580-38577de8-3075-45fc-9c3f-c317ed9c25e0.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663346948580-38577de8-3075-45fc-9c3f-c317ed9c25e0.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="TdjzQ"></a></p><h2 id="（3）Nano-ID"><a href="#（3）Nano-ID" class="headerlink" title="（3）Nano ID"></a>（3）Nano ID</h2><p>nanoid 是一个小巧、安全、URL友好、唯一的 JavaScript 字符串ID生成器。其具有以下特性：<br />●<strong>小巧.<strong>130 bytes (已压缩和 gzipped)。 没有依赖。Size Limit控制大小。<br />●</strong>快速.<strong>它比 UUID 快 60%。<br />●</strong>安全.<strong>它使用加密的强随机 API。可在集群中使用。<br />●</strong>紧凑.<strong>它使用比 UUID（A-Za-z0-9_-）更大的字母表。 因此，ID 大小从36个符号减少到21个符号。<br />●</strong>易用.</strong> Nano ID 已被移植到 20种编程语言。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nanoid &#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line">model.<span class="property">id</span> = <span class="title function_">nanoid</span>() <span class="comment">//=&gt; &quot;V1StGXR8_Z5jdHi6B-myT&quot;</span></span><br></pre></td></tr></table></figure><p><br /><strong>Github：</strong><a href="https://github.com/ai/nanoid">https://github.com/ai/nanoid</a></p><p><a name="OICzz"></a></p><h1 id="4-数字"><a href="#4-数字" class="headerlink" title="4. 数字"></a>4. 数字</h1><p><a name="CJBLT"></a></p><h2 id="（1）Math-js"><a href="#（1）Math-js" class="headerlink" title="（1）Math.js"></a>（1）Math.js</h2><p>Math.js 是一个强大的 JavaScript 和 Node.js 数学库。它具有支持符号计算的灵活表达式解析器，带有大量内置函数和常量，并提供了一个集成的解决方案来处理不同的数据类型，如数字、大数、复数、分数、单位和矩阵。功能强大且易于使用。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663345429885-0e72b914-e929-4b6c-abad-06635795590c.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663345429885-0e72b914-e929-4b6c-abad-06635795590c.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="eeHP5"></a></p><h2 id="（2）Numeral-js"><a href="#（2）Numeral-js" class="headerlink" title="（2）Numeral.js"></a>（2）Numeral.js</h2><p>Numeral.js 是一个用来对数值进行操作和格式化的 JS 库。可将数字格式化为货币、百分比、时间，甚至是序数词的缩写（比如1st，100th）。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663395404093-ae3d768c-0ccd-4ed3-89d9-0087808855cf.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663395404093-ae3d768c-0ccd-4ed3-89d9-0087808855cf.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="VIbiK"></a></p><h2 id="（3）Accounting-js"><a href="#（3）Accounting-js" class="headerlink" title="（3）Accounting.js"></a>（3）Accounting.js</h2><p>Accounting.js 是一个用于数字、货币和货币解析&#x2F;格式化的小型 JavaScript 库。它是轻量级的，完全可本地化的，没有依赖关系，并且在客户端或服务器端都可以很好地工作。使用独立或作为 nodeJS&#x2F;npm 和 AMD&#x2F;requireJS 模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Default usage:</span></span><br><span class="line">accounting.<span class="title function_">formatMoney</span>(<span class="number">12345678</span>); <span class="comment">// $12,345,678.00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// European formatting (custom symbol and separators), can also use options object as second parameter:</span></span><br><span class="line">accounting.<span class="title function_">formatMoney</span>(<span class="number">4999.99</span>, <span class="string">&quot;€&quot;</span>, <span class="number">2</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;,&quot;</span>); <span class="comment">// €4.999,99</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Negative values can be formatted nicely:</span></span><br><span class="line">accounting.<span class="title function_">formatMoney</span>(-<span class="number">500000</span>, <span class="string">&quot;£ &quot;</span>, <span class="number">0</span>); <span class="comment">// £ -500,000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple `format` string allows control of symbol position (%v = value, %s = symbol):</span></span><br><span class="line">accounting.<span class="title function_">formatMoney</span>(<span class="number">5318008</span>, &#123; <span class="attr">symbol</span>: <span class="string">&quot;GBP&quot;</span>,  <span class="attr">format</span>: <span class="string">&quot;%v %s&quot;</span> &#125;); <span class="comment">// 5,318,008.00 GBP</span></span><br></pre></td></tr></table></figure><p><br /><strong>Github：</strong><a href="https://github.com/openexchangerates/accounting.js">https://github.com/openexchangerates/accounting.js</a></p><p><a name="meSLV"></a></p><h1 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5. 字符串"></a>5. 字符串</h1><p><a name="oCUVb"></a></p><h2 id="（1）qs"><a href="#（1）qs" class="headerlink" title="（1）qs"></a>（1）qs</h2><p>qs是一个url参数转化（parse和stringify）的JavaScript库。可以把格式化的字符串转换为对象格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;qs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = qs.<span class="title function_">parse</span>(<span class="string">&#x27;a=c&#x27;</span>);</span><br><span class="line">assert.<span class="title function_">deepEqual</span>(obj, &#123; <span class="attr">a</span>: <span class="string">&#x27;c&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = qs.<span class="title function_">stringify</span>(obj);</span><br><span class="line">assert.<span class="title function_">equal</span>(str, <span class="string">&#x27;a=c&#x27;</span>);</span><br></pre></td></tr></table></figure><p><br /><strong>Github：</strong><a href="https://github.com/ljharb/qs">https://github.com/ljharb/qs</a></p><p><a name="O8Q54"></a></p><h2 id="（2）Voca"><a href="#（2）Voca" class="headerlink" title="（2）Voca"></a>（2）Voca</h2><p>Voca 是一个用于操作字符串的 JavaScript 库。Voca 库提供了有用的函数来使字符串操作更加舒适：更改大小写、修剪、填充、slugify、拉丁化、sprintfy、截断、转义等。模块化设计允许加载整个库或单个函数以最小化应用程序构建。该库经过全面测试、有据可查并长期受支持。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="title function_">camelCase</span>(<span class="string">&#x27;bird flight&#x27;</span>);              <span class="comment">// =&gt; &#x27;birdFlight&#x27;</span></span><br><span class="line">v.<span class="title function_">sprintf</span>(<span class="string">&#x27;%s costs $%.2f&#x27;</span>, <span class="string">&#x27;Tea&#x27;</span>, <span class="number">1.5</span>); <span class="comment">// =&gt; &#x27;Tea costs $1.50&#x27;</span></span><br><span class="line">v.<span class="title function_">slugify</span>(<span class="string">&#x27;What a wonderful world&#x27;</span>);     <span class="comment">// =&gt; &#x27;what-a-wonderful-world&#x27;</span></span><br></pre></td></tr></table></figure><p><br /><strong>Github：</strong><a href="https://github.com/panzerdp/voca">https://github.com/panzerdp/voca</a></p><p><a name="Fa7TA"></a></p><h1 id="6-存储"><a href="#6-存储" class="headerlink" title="6. 存储"></a>6. 存储</h1><p><a name="GklnF"></a></p><h2 id="（1）js-cookie-js"><a href="#（1）js-cookie-js" class="headerlink" title="（1）js-cookie.js"></a>（1）js-cookie.js</h2><p>js-cookie.js 是一个用于处理浏览器 cookie 的简单、轻量级 JavaScript API。其具有以下特点：<br />●适用于所有浏览器<br />●接受任何字符<br />●经过大量测试<br />●无依赖<br />●支持ES模块<br />●支持 AMD&#x2F;CommonJS<br />●符合RFC 6265<br />●有用的维基<br />●启用自定义编码&#x2F;解码<br />●&lt; 800 字节压缩！<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663396381742-4045b423-ce34-4963-8cb3-ceedcfbf01de.png?x-oss-process=image/resize,w_632,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663396381742-4045b423-ce34-4963-8cb3-ceedcfbf01de.png?x-oss-process=image/resize,w_632,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="bW0B6"></a></p><h2 id="（2）Cookies"><a href="#（2）Cookies" class="headerlink" title="（2）Cookies"></a>（2）Cookies</h2><p>Cookies 是一个用于获取和设置 HTTP(S) cookie的node.js模块。它的特点如下：<br />●允许使用Keygrip来签署cookie，以防止篡改；<br />●延迟验证cookie，以降低成本；<br />●不允许通过不安全的套接字发送安全cookies；<br />●默认情况下，所有cookie都仅适用于HTTP，并且通过SSL发送的cookie是安全的；<br />●允许其他库在不知道签名机制的情况下访问 cookie。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Cookies</span> = <span class="built_in">require</span>(<span class="string">&#x27;cookies&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optionally define keys to sign cookie values</span></span><br><span class="line"><span class="comment">// to prevent client tampering</span></span><br><span class="line"><span class="keyword">var</span> keys = [<span class="string">&#x27;keyboard cat&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// Create a cookies object</span></span><br><span class="line">  <span class="keyword">var</span> cookies = <span class="keyword">new</span> <span class="title class_">Cookies</span>(req, res, &#123; <span class="attr">keys</span>: keys &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get a cookie</span></span><br><span class="line">  <span class="keyword">var</span> lastVisit = cookies.<span class="title function_">get</span>(<span class="string">&#x27;LastVisit&#x27;</span>, &#123; <span class="attr">signed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the cookie to a value</span></span><br><span class="line">  cookies.<span class="title function_">set</span>(<span class="string">&#x27;LastVisit&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(), &#123; <span class="attr">signed</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!lastVisit) &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Welcome, first time visitor!&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Welcome back! Nothing much changed since your last visit at &#x27;</span> + lastVisit + <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Visit us at http://127.0.0.1:3000/ !&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br /><strong>GitHub：</strong><a href="https://github.com/pillarjs/cookies">https://github.com/pillarjs/cookies</a></p><p><a name="gT8Pv"></a></p><h1 id="7-安全"><a href="#7-安全" class="headerlink" title="7. 安全"></a>7. 安全</h1><p><a name="I0YJt"></a></p><h2 id="（1）DOMPurify"><a href="#（1）DOMPurify" class="headerlink" title="（1）DOMPurify"></a>（1）DOMPurify</h2><p>DOMPurify 是一个开源的基于DOM的快速XSS净化工具。输入HTML元素，然后通过DOM解析递归元素节点，进行净化，输出安全的HTML。 <br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663347229048-8ff9cd22-334b-4633-9cd3-fa9f3bd07c6d.png?x-oss-process=image/resize,w_638,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1663347229048-8ff9cd22-334b-4633-9cd3-fa9f3bd07c6d.png?x-oss-process=image/resize,w_638,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收藏 </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件处理库</title>
      <link href="/2023/06/27/frontend/collection/wen-jian-chu-li-ku/"/>
      <url>/2023/06/27/frontend/collection/wen-jian-chu-li-ku/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657475987133-286486e5-844e-4459-b79b-f49d1cba4619.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657475987133-286486e5-844e-4459-b79b-f49d1cba4619.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="SCtXi"></a></p><h1 id="1-PDF"><a href="#1-PDF" class="headerlink" title="1. PDF"></a>1. PDF</h1><p><a name="bgIJx"></a></p><h2 id="（1）PDF-js"><a href="#（1）PDF-js" class="headerlink" title="（1）PDF.js"></a>（1）PDF.js</h2><p>PDF.js是使用 HTML5 构建的可移植文档格式 (PDF) 查看器。它由社区驱动并受 Mozilla 支持，目标是创建一个通用的、基于 Web 标准的平台来解析和呈现 PDF。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657462054009-7480ac84-c28e-4909-8bc9-b68eb38206ad.png?x-oss-process=image/resize,w_886,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657462054009-7480ac84-c28e-4909-8bc9-b68eb38206ad.png?x-oss-process=image/resize,w_886,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="R5YQW"></a></p><h2 id="（2）jsPDF"><a href="#（2）jsPDF" class="headerlink" title="（2）jsPDF"></a>（2）jsPDF</h2><p>jsPDF 是一个使用 JavaScript 语言生成 PDF 的开源库，是一个用于生成 PDF 的领先的 HTML5 客户端解决方案。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657462911906-fe4483d1-dde4-416b-b7f0-4cb6b69c4b41.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657462911906-fe4483d1-dde4-416b-b7f0-4cb6b69c4b41.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="XMA9o"></a></p><h2 id="（3）pdfmake"><a href="#（3）pdfmake" class="headerlink" title="（3）pdfmake"></a>（3）pdfmake</h2><p>在纯 JavaScript 中用于服务器端和客户端的 PDF 文档生成库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657463503527-9a884951-1607-41ab-abb2-d2e771d67685.png?x-oss-process=image/resize,w_883,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657463503527-9a884951-1607-41ab-abb2-d2e771d67685.png?x-oss-process=image/resize,w_883,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="fOlFT"></a></p><h2 id="（4）pdf-lib"><a href="#（4）pdf-lib" class="headerlink" title="（4）pdf-lib"></a>（4）pdf-lib</h2><p>pdf-lib 可以在任何 JavaScript 环境中创建和修改 PDF 文档。它旨在解决 JavaScript 生态系统对 PDF 操作（尤其是 PDF修改）缺乏强大支持的问题。可以用于任何现代 JavaScript 运行时，如 Node、Browser、Deno 和 React Native 等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657464689492-3b177db2-cee9-41d6-8ffc-8bd2b44a2cd1.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657464689492-3b177db2-cee9-41d6-8ffc-8bd2b44a2cd1.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="PhJsV"></a></p><h2 id="（5）pdfkit"><a href="#（5）pdfkit" class="headerlink" title="（5）pdfkit"></a>（5）pdfkit</h2><p>PDFKit 是一个用于 Node 和浏览器的 PDF 文档生成库，可以轻松创建复杂的多页可打印文档。API 包含可链接性，并包括低级功能以及更高级别功能的抽象。PDFKit API 的设计很简单，因此生成复杂的文档通常只需几个函数调用即可。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657466430038-5ca36f4e-4545-4170-ac1c-444ec2a64178.png?x-oss-process=image/resize,w_884,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657466430038-5ca36f4e-4545-4170-ac1c-444ec2a64178.png?x-oss-process=image/resize,w_884,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="cCWP1"></a></p><h2 id="（6）react-pdf"><a href="#（6）react-pdf" class="headerlink" title="（6）react-pdf"></a>（6）react-pdf</h2><p>react-pdf 是一个用于在浏览器和服务器上创建 PDF 文件的 React 渲染器。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657466736878-9b0118ac-e15c-4b26-b1ba-f0cb6a1acb17.png?x-oss-process=image/resize,w_889,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657466736878-9b0118ac-e15c-4b26-b1ba-f0cb6a1acb17.png?x-oss-process=image/resize,w_889,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="USiuc"></a></p><h1 id="2-图片"><a href="#2-图片" class="headerlink" title="2. 图片"></a>2. 图片</h1><p><a name="vRH4Y"></a></p><h2 id="（1）sharp"><a href="#（1）sharp" class="headerlink" title="（1）sharp"></a>（1）sharp</h2><p>sharp 是一个高性能的 Node.js 图像处理库，调整 JPEG、PNG、WebP、AVIF 和 TIFF 图像大小的最快模块。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657467735827-7527b2f3-8471-4c97-a84c-1900fd3ef594.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657467735827-7527b2f3-8471-4c97-a84c-1900fd3ef594.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="Wuc0D"></a></p><h2 id="（2）cropperjs"><a href="#（2）cropperjs" class="headerlink" title="（2）cropperjs"></a>（2）cropperjs</h2><p>cropperjs 是一个 JavaScript 图像裁剪器，支持29个裁剪选项、27种方法、6个事件、缩放、旋转等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657467979410-53c12b48-bdfb-4257-a409-5fe0f1e2cb8a.png?x-oss-process=image/resize,w_762,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657467979410-53c12b48-bdfb-4257-a409-5fe0f1e2cb8a.png?x-oss-process=image/resize,w_762,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="COSjr"></a></p><h2 id="（3）tui-image-editor"><a href="#（3）tui-image-editor" class="headerlink" title="（3）tui.image-editor"></a>（3）tui.image-editor</h2><p>tui.image-editor 是一个使用 HTML5 Canvas 的全功能图像编辑器。它易于使用并提供强大的过滤器。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657470118701-f578d232-862e-4979-8f85-2127f5ed383e.png?x-oss-process=image/resize,w_785,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657470118701-f578d232-862e-4979-8f85-2127f5ed383e.png?x-oss-process=image/resize,w_785,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="UpEt9"></a></p><h2 id="（4）compressorjs"><a href="#（4）compressorjs" class="headerlink" title="（4）compressorjs"></a>（4）compressorjs</h2><p>JavaScript 图像压缩器。使用浏览器原生的 canvas.toBlob API 来做压缩工作，即<strong>有损压缩</strong>，<strong>异步</strong>压缩，在不同的浏览器有<strong>不同的压缩效果</strong>。一般在客户端上传之前使用这个来预压缩图片。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657470473998-eef98daf-f592-48ef-a6df-7a61faf1b993.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657470473998-eef98daf-f592-48ef-a6df-7a61faf1b993.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="RIzaU"></a></p><h2 id="（5）viewerjs"><a href="#（5）viewerjs" class="headerlink" title="（5）viewerjs"></a>（5）viewerjs</h2><p>viewerjs 是一个 JavaScript 图像查看器，支持52个查看选项、23种操作方法、17个事件、旋转、移动、缩放等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657470620499-aabeb917-4a5e-4c94-ab74-6a3138c504f1.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657470620499-aabeb917-4a5e-4c94-ab74-6a3138c504f1.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="sndoJ"></a></p><h2 id="（6）omagesloaded"><a href="#（6）omagesloaded" class="headerlink" title="（6）omagesloaded"></a>（6）omagesloaded</h2><p>omagesloaded 是一个用来检查图像何时加载的 JavaScript 库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657471110588-c5c5e359-f553-46c4-b4f2-1835344fc9ef.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657471110588-c5c5e359-f553-46c4-b4f2-1835344fc9ef.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="jP85V"></a></p><h1 id="3-音视频"><a href="#3-音视频" class="headerlink" title="3. 音视频"></a>3. 音视频</h1><p><a name="pjgYP"></a></p><h2 id="（1）video-js"><a href="#（1）video-js" class="headerlink" title="（1）video.js"></a>（1）video.js</h2><p>Video.js 是一个为 HTML5 世界从头开始构建的网络视频播放器。它支持 HTML5 视频和媒体源扩展，以及其他播放技术，如 YouTube 和 Vimeo（通过插件）。它支持在台式机和移动设备上播放视频。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657471942627-408eba4b-d082-471a-b3b4-f0efacb7f8cd.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657471942627-408eba4b-d082-471a-b3b4-f0efacb7f8cd.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="Fr7fR"></a></p><h2 id="（2）plyr"><a href="#（2）plyr" class="headerlink" title="（2）plyr"></a>（2）plyr</h2><p>Plyr 是一个简单、轻量级、可访问和可定制的 HTML5、YouTube 和 Vimeo 媒体播放器，支持现代浏览器。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657472049651-78b61867-72c5-4c3a-87ce-ec90030b6ea9.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657472049651-78b61867-72c5-4c3a-87ce-ec90030b6ea9.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="XricI"></a></p><h2 id="（3）MediaElement-js"><a href="#（3）MediaElement-js" class="headerlink" title="（3）MediaElement.js"></a>（3）MediaElement.js</h2><p>MediaElement.js 是一个HTML5 <audio> 或 <video> 播放器，支持 MP4、WebM 和 MP3 以及 HLS、Dash、YouTube、Facebook、SoundCloud 等，具有通用 HTML5 MediaElement API，可在所有浏览器中实现一致的 UI。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657474380271-9f1985bd-8b0d-4c1e-835c-475e07e645ff.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657474380271-9f1985bd-8b0d-4c1e-835c-475e07e645ff.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="Mg1IY"></a></p><h2 id="（4）xgplayer"><a href="#（4）xgplayer" class="headerlink" title="（4）xgplayer"></a>（4）xgplayer</h2><p>西瓜播放器是一个Web视频播放器类库，它本着一切都是组件化的原则设计了独立可拆卸的 UI 组件。更重要的是它不只是在 UI 层有灵活的表现，在功能上也做了大胆的尝试：摆脱视频加载、缓冲、格式支持对 video 的依赖。尤其是在 mp4 点播上做了较大的努力，让本不支持流式播放的 mp4 能做到分段加载，这就意味着可以做到清晰度无缝切换、加载控制、节省视频流量。同时，它也集成了对 flv、hls、dash 的点播和直播支持。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657474785135-58850b84-8d64-4369-bec6-e8fad6a12324.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657474785135-58850b84-8d64-4369-bec6-e8fad6a12324.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="ahc2Y"></a></p><h2 id="（5）DPlayer"><a href="#（5）DPlayer" class="headerlink" title="（5）DPlayer"></a>（5）DPlayer</h2><p>DPlayer 是一款可爱的 HTML5 弹幕视频播放器，可帮助人们轻松构建视频和弹幕。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657475030777-0158c4ce-8b7f-47ec-8ced-c6b42c886561.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657475030777-0158c4ce-8b7f-47ec-8ced-c6b42c886561.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="oGCb6"></a></p><h2 id="（6）Howler-js"><a href="#（6）Howler-js" class="headerlink" title="（6）Howler.js"></a>（6）Howler.js</h2><p>howler.js 是一个现代 web 音频库。它默认为Web Audio API并回退到HTML5 Audio。这使得在所有平台上使用 JavaScript 处理音频变得容易且可靠。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657475185845-b716fd84-288a-4d30-b6b0-a25d414e0470.png?x-oss-process=image/resize,w_825,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657475185845-b716fd84-288a-4d30-b6b0-a25d414e0470.png?x-oss-process=image/resize,w_825,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="tGLJ3"></a></p><h1 id="4-表格"><a href="#4-表格" class="headerlink" title="4. 表格"></a>4. 表格</h1><p><a name="TECiK"></a></p><h2 id="（1）Handsontable"><a href="#（1）Handsontable" class="headerlink" title="（1）Handsontable"></a>（1）Handsontable</h2><p>Handsontable 是一个具有电子表格外观的 JavaScript 数据网格组件。适用于 React、Angular 和 Vue。它结合了数据网格功能和类似电子表格的 UX。它提供数据绑定、数据验证、过滤、排序和 CRUD 操作。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657475321627-76340bd7-4945-4ed6-b264-1d21407149e2.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657475321627-76340bd7-4945-4ed6-b264-1d21407149e2.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="hxqQt"></a></p><h2 id="（2）ag-grid"><a href="#（2）ag-grid" class="headerlink" title="（2）ag-grid"></a>（2）ag-grid</h2><p>AG Grid 是一个功能齐全且高度可定制的 JavaScript 数据网格。它提供了出色的性能，没有第三方依赖，并且可以与所有主要的 JavaScript 框架顺利集成。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657475416320-cda2c2fb-dc15-4e43-b2b8-964da68955ab.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657475416320-cda2c2fb-dc15-4e43-b2b8-964da68955ab.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="hGmxF"></a></p><h2 id="（3）x-spreadsheet"><a href="#（3）x-spreadsheet" class="headerlink" title="（3）x-spreadsheet"></a>（3）x-spreadsheet</h2><p>x-spreadsheet 是一个基于 Web 的 JavaScript（canvas）电子表格。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476078361-e291876e-157f-4d5c-a230-47a6c867dcc0.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476078361-e291876e-157f-4d5c-a230-47a6c867dcc0.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="pM7eq"></a></p><h2 id="（4）cheetah-grid"><a href="#（4）cheetah-grid" class="headerlink" title="（4）cheetah-grid"></a>（4）cheetah-grid</h2><p>cheetah-grid 是最快的 Web 开源数据表。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476161536-3abbcc9b-40ec-4330-83a3-dbc662f172fe.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476161536-3abbcc9b-40ec-4330-83a3-dbc662f172fe.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="wM1Y9"></a></p><h2 id="（5）ExcelJS"><a href="#（5）ExcelJS" class="headerlink" title="（5）ExcelJS"></a>（5）ExcelJS</h2><p>ExcelJS 是一个Excel电子表格文件逆向工程项目。可以读取，操作并写入电子表格数据和样式到 XLSX 和 JSON 文件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476349708-5d038e35-8c1d-4726-a4a6-0d3daec3766f.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476349708-5d038e35-8c1d-4726-a4a6-0d3daec3766f.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="TILeH"></a></p><h2 id="（6）SheetJS"><a href="#（6）SheetJS" class="headerlink" title="（6）SheetJS"></a>（6）SheetJS</h2><p>SheetJS 是一个简化的电子表格，用意用来阅读、编辑和导出电子表格，其适用于 Web 浏览器和服务器，在 Office 365 中受 Microsoft 信任。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476602182-8862bc28-5862-42bb-b917-cfc188e0eec9.png?x-oss-process=image/resize,w_959,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476602182-8862bc28-5862-42bb-b917-cfc188e0eec9.png?x-oss-process=image/resize,w_959,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="hBUZq"></a></p><h1 id="5-文件上传"><a href="#5-文件上传" class="headerlink" title="5. 文件上传"></a>5. 文件上传</h1><p><a name="lEYA1"></a></p><h2 id="（1）Uppy"><a href="#（1）Uppy" class="headerlink" title="（1）Uppy"></a>（1）Uppy</h2><p>Uppy 是一款时尚的模块化 JavaScript 文件上传器，可与任何应用程序无缝集成。它速度快，具有易于理解的 API，让您不必担心比构建文件上传器更重要的问题。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476760136-38d64640-c83e-469b-98c0-8ebaf58a40f0.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476760136-38d64640-c83e-469b-98c0-8ebaf58a40f0.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="hsOOV"></a></p><h2 id="（2）filepond"><a href="#（2）filepond" class="headerlink" title="（2）filepond"></a>（2）filepond</h2><p>filepond 是一个用于上传文件的 JavaScript 库，优化图像以加快上传速度，并提供出色、可访问、如丝般流畅的用户体验。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476974714-7f19e9ea-26e2-4935-a857-aafb7eff4848.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657476974714-7f19e9ea-26e2-4935-a857-aafb7eff4848.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="lSr89"></a></p><h2 id="（3）Dropzone"><a href="#（3）Dropzone" class="headerlink" title="（3）Dropzone"></a>（3）Dropzone</h2><p>Dropzone 是一个 JavaScript 库，可以将任何 HTML 元素转换为 dropzone。这意味着用户可以将文件拖放到上面，Dropzone 将显示文件预览和上传进度，并通过 XHR 为你处理上传。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477025569-e6733b01-7842-4a1e-a9cb-02b6515ff278.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477025569-e6733b01-7842-4a1e-a9cb-02b6515ff278.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="NrCXI"></a></p><h2 id="（4）vue-upload-component"><a href="#（4）vue-upload-component" class="headerlink" title="（4）vue-upload-component"></a>（4）vue-upload-component</h2><p>vue-upload-component 是一个用于 Vue.js 的上传组件，支持多文件上传，上传目录，拖拽上传，拖拽目录，以及支持同时上传多个文件等。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477195745-7a45c682-dbc4-46e7-a100-9b572e0b4148.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477195745-7a45c682-dbc4-46e7-a100-9b572e0b4148.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="i3uNl"></a></p><h2 id="（5）Uppload"><a href="#（5）Uppload" class="headerlink" title="（5）Uppload"></a>（5）Uppload</h2><p>Uppload 是一个更好的 JavaScript 图片上传器。它具有 30 多个插件的高度可定制性，完全免费和开源，并且可以与任何文件上传后端一起使用。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477331697-b633a214-5304-446a-a921-2c5f94ba08c7.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477331697-b633a214-5304-446a-a921-2c5f94ba08c7.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="VHo89"></a></p><h2 id="（6）react-dropzone"><a href="#（6）react-dropzone" class="headerlink" title="（6）react-dropzone"></a>（6）react-dropzone</h2><p>react-dropzone 是一个为 React 量身定制的，基于HTML5 的 drop &amp;&amp; drag API，可以实现拖拽上传文件的 JavaScript 库。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477486722-9616e88f-0889-4512-bbe4-703fd462f74b.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477486722-9616e88f-0889-4512-bbe4-703fd462f74b.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="kdKSz"></a></p><h1 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h1><p><a name="aCKIb"></a></p><h2 id="（1）JSZip"><a href="#（1）JSZip" class="headerlink" title="（1）JSZip"></a>（1）JSZip</h2><p>JSZip 是一个使用 JavaScript 创建、读取和编辑 .zip 文件的库，具有可爱而简单的 API。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477589748-3d6503c3-d76f-44c4-9f3a-0c15b1a6d28c.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477589748-3d6503c3-d76f-44c4-9f3a-0c15b1a6d28c.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="OidiE"></a></p><h2 id="（2）docxtemplater"><a href="#（2）docxtemplater" class="headerlink" title="（2）docxtemplater"></a>（2）docxtemplater</h2><p>docxtemplater 是一个从 docx&#x2F;pptx 模板生成 docx&#x2F;pptx 文档的库。它可以用数据替换 {placeholders} 并且还支持循环和条件。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477829197-4b9a5388-8966-4e34-a492-f15bc4816485.png?x-oss-process=image/resize,w_882,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477829197-4b9a5388-8966-4e34-a492-f15bc4816485.png?x-oss-process=image/resize,w_882,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="fv8rX"></a></p><h2 id="（3）textract"><a href="#（3）textract" class="headerlink" title="（3）textract"></a>（3）textract</h2><p>textract 是一个 node.js 模块，用于从 html、pdf、doc、docx、xls、xlsx、csv、pptx、png、jpg、gif、rtf 等中提取文本。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477790788-15e888ca-153e-4527-b209-cd147ffbb850.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477790788-15e888ca-153e-4527-b209-cd147ffbb850.png" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="OrXng"></a></p><h2 id="（4）PptxGenJS"><a href="#（4）PptxGenJS" class="headerlink" title="（4）PptxGenJS"></a>（4）PptxGenJS</h2><p>PptxGenJS 是一个使用功能强大、简洁的 JavaScript API 创建 PowerPoint 演示文稿。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477876415-677a8519-d32f-4c40-97d8-7e03df74db21.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657477876415-677a8519-d32f-4c40-97d8-7e03df74db21.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="EShJw"></a></p><h2 id="（5）officegen"><a href="#（5）officegen" class="headerlink" title="（5）officegen"></a>（5）officegen</h2><p>officegen 是一个用于 JavaScript 中 Word (docx)、PowerPoint (pptx) 和 Excell (xlsx) 的独立 Office Open XML 文件（Microsoft Office 2007 及更高版本）生成器。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657478146268-be5fbfc2-cced-420c-83ab-7850444598b5.png?x-oss-process=image/resize,w_750,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657478146268-be5fbfc2-cced-420c-83ab-7850444598b5.png?x-oss-process=image/resize,w_750,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><p><a name="wlC6r"></a></p><h2 id="（6）PapaParse"><a href="#（6）PapaParse" class="headerlink" title="（6）PapaParse"></a>（6）PapaParse</h2><p>PapaParse 是一个快速而强大的 CSV（分隔文本）解析器，可以优雅地处理大文件和格式错误的输入。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657478027071-66df0d49-f1c8-48cb-afbb-f43701ff4975.png?x-oss-process=image/resize,w_841,limit_0" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2022/png/1500604/1657478027071-66df0d49-f1c8-48cb-afbb-f43701ff4975.png?x-oss-process=image/resize,w_841,limit_0" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"></p><br /> ]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 收藏 </tag>
            
            <tag> 文件处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端四大手写</title>
      <link href="/2023/06/27/frontend/interview/qian-duan-si-da-shou-xie/"/>
      <url>/2023/06/27/frontend/interview/qian-duan-si-da-shou-xie/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>要问程序员最心虚的面试题，如果要投票选择，<strong>手撕代码</strong>一定是前三位的。其中在前端领域，以<strong>手写 bind</strong>、<strong>手写深拷贝</strong>、<strong>手写 EventHub</strong>（发布-订阅）、<strong>手写 Promise</strong>最为常见，我将他们称为<strong>四大手写。</strong>本文的目的就是要破除大家对四大手写的恐惧，将从<strong>为什么要会手写</strong>，到每个手写的<strong>关键思路总结</strong>，再到<strong>最终模板</strong>，我都会<strong>毫无保留</strong>地分享给大家。话不多说，让我们开始吧。<br><a name="VqL5S"></a></p><h2 id="为什么要会手写"><a href="#为什么要会手写" class="headerlink" title="为什么要会手写"></a>为什么要会手写</h2><p>面试遇到手写题一脸懵逼的你也许一定想问：网上代码一堆，随便抄一下不香吗，为什么要手写？关于这个问题最直接的回答：为了<strong>区分</strong>厉害的和普通的。但坦白来讲，<strong>会白板实现关键功能的人，实现业务需求的效率一定更高</strong>。<br />为什么这么说？<br />拿手写 Promise 举例来讲，真实的业务场景会遇到大量的 AJAX 异步请求，而且大多是嵌套多层的异步代码。<br />普通前端 A 平时只会最简单的 Promise 用法，遇到多层嵌套的 Promise 就搞不清楚逻辑了，于是开发 1 小时，修 Bug 3 小时，<strong>内卷 996</strong>；<br />高级前端 B 会手写 Promise，对 Promise 的内在逻辑一清二楚，于是开发半小时，修 Bug 15 分钟，完成质量高速度快，深受 PM 小姐姐和测试小哥哥的喜爱，<strong>准点下班绩效高</strong>。<br />再举个 EventHub 的例子，会手写 EventHub 的前端，Vue 里的 $emit、$on 基本就是闭眼写；同理还有 React 里面组件想要调用普通函数（非箭头函数），需要 this.fn.bind(this)，会手写 bind 的前端就更容易举一反三，不会的就只能死记硬背，遇到 Bug 不知所措。。。<br />所以，会“四大手写”是<strong>前端进阶</strong>的必由之路，甚至可以说，<strong>手写关键代码的能力 ≈ 编程能力</strong>。</p><hr><p><a name="sODCV"></a></p><h2 id="手写-bind"><a href="#手写-bind" class="headerlink" title="手写 bind"></a>手写 bind</h2><p>bind 用法不难，一句话解释就是把新的 this 绑定到某个函数 func 上，并返回 func 的一个拷贝。使用方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> boundFunc = func.<span class="title function_">bind</span>(thisArg[, arg1[, arg2[, ...argN]]])</span><br></pre></td></tr></table></figure><p><br />那怎么实现呢？我认为手写 bind 可以分为三个境界：</p><ol><li>初级：只用 ES6 新语法</li></ol><ul><li>优点：因为可以使用 const 、… 操作符，代码简洁</li><li>缺点：兼容性稍差</li></ul><ol start="2"><li>中级：使用 ES5 语法</li></ol><ul><li>优点：兼容 IE（其实可以忽略）</li><li>缺点：参数要用Array.prototype.slice 获取，复杂且不支持 new</li></ul><ol start="3"><li>高级：ES5 + 支持 new</li></ol><ul><li>优点：支持 new</li><li>缺点：最复杂</li></ul><p><a name="P5uSV"></a></p><h3 id="初级-bind"><a href="#初级-bind" class="headerlink" title="初级 bind"></a>初级 bind</h3><p>这种方式的优点是因为可以使用 const 、… 操作符，代码简洁；缺点是不兼容 IE 等一些古老浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初级：ES6 新语法 const/...</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bind_1</span>(<span class="params">asThis, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="variable language_">this</span>; <span class="comment">// 这里的 this 就是调用 bind 的函数 func</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(asThis, ...args, ...args2);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="mivQ4"></a></p><h3 id="中级-bind"><a href="#中级-bind" class="headerlink" title="中级 bind"></a>中级 bind</h3><ul><li>优点：兼容 IE</li><li>缺点：参数要用Array.prototype.slice 取，复杂且不支持 new</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中级：兼容 ES5</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bind_2</span>(<span class="params">asThis</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> slice = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>;</span><br><span class="line">  <span class="keyword">var</span> args = slice.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;cannot bind non_function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> args2 = slice.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(asThis, args.<span class="title function_">concat</span>(args2));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Vig5y"></a></p><h3 id="高级-bind"><a href="#高级-bind" class="headerlink" title="高级 bind"></a>高级 bind</h3><ul><li>优点：支持 new</li><li>缺点：最复杂</li></ul><p>写之前，我们先来看一看我们应该如何判断 new，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title function_">fn</span>(args)</span><br></pre></td></tr></table></figure><p> 其实<strong>等价于</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = &#123;&#125;</span><br><span class="line">temp.<span class="property">__proto__</span> = fn.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">fn.<span class="title function_">apply</span>(temp, [...args])</span><br><span class="line"><span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><p>核心在第二句：temp.<strong>proto</strong> &#x3D; fn.prototype，有了这个，我们便知道可以用 fn.prototype 是否为对象原型来判断是否为 new 的情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高级：支持 new，例如 new (funcA.bind(thisArg, args))</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bind_3</span>(<span class="params">asThis</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> slice = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>;</span><br><span class="line">  <span class="comment">// 改变数组slice方法的作用域，使 this 指向arguments对象</span></span><br><span class="line">  <span class="comment">// call () 方法的第二个参数表示传递给slice的参数即截取数组的起始位置</span></span><br><span class="line">  <span class="keyword">var</span> args1 = slice.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Must accept function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resultFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> args2 = slice.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(</span><br><span class="line">      resultFn.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(<span class="variable language_">this</span>) ? <span class="variable language_">this</span> : asThis, <span class="comment">// 用来绑定 this</span></span><br><span class="line">      args1.<span class="title function_">concat</span>(args2)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  resultFn.<span class="property"><span class="keyword">prototype</span></span> = fn.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">return</span> resultFn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是前端年年考，年年不会，网上博客又经常误人子弟的“手写深拷贝”。</p><hr><p><a name="vuhlj"></a></p><h2 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h2><p>先问这么几个问题，</p><ul><li>首先为什么要深拷贝？不希望数据被修改或者只需要部分修改数据。</li><li>怎么实现深拷贝？简单需求用 JSON 反序列化，复杂需求用递归克隆。</li><li>手写深拷贝的优点？体现扎实的 JS 基础。</li><li>至于缺点以及如何解决稍后再回答<br><a name="IQGQm"></a></li></ul><h3 id="简单需求"><a href="#简单需求" class="headerlink" title="简单需求"></a>简单需求</h3><p>最简单的手写深拷贝就一行，通过 <strong>JSON 反序列化</strong>来实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> B = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(A))</span><br></pre></td></tr></table></figure><p>缺点也是显而易见的，<strong>JSON value不支持的数据类型，都拷贝不了</strong></p><ol><li>不支持函数</li><li>不支持undefined（<strong>支持null</strong>）</li><li>不支持循环引用，比如 a &#x3D; {name: ‘a’}; a.self &#x3D; a; a2 &#x3D; JSON.parse(JSON.stringify(a))</li><li>不支持Date，会变成 ISO8601 格式的字符串</li><li>不支持正则表达式</li><li>不支持Symbol</li></ol><p>如何支持这些复杂需求，就需要用到<strong>递归克隆</strong>了。<br><a name="LTgyG"></a></p><h3 id="复杂需求"><a href="#复杂需求" class="headerlink" title="复杂需求"></a>复杂需求</h3><p><strong>核心</strong>有三点：</p><ol><li>递归</li><li>对象分类型讨论</li><li>解决循环引用（环）</li></ol><p>下面给出我的模板：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeepClone</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cacheList</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">clone</span>(<span class="params">source</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> cache = <span class="variable language_">this</span>.<span class="title function_">findCache</span>(source);</span><br><span class="line">      <span class="keyword">if</span> (cache) <span class="keyword">return</span> cache; <span class="comment">// 如果找到缓存，直接返回</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> target;</span><br><span class="line">        <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">          target = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">Function</span>) &#123;</span><br><span class="line">          target = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> source.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">          target = <span class="keyword">new</span> <span class="title class_">Date</span>(source);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">          target = <span class="keyword">new</span> <span class="title class_">RegExp</span>(source.<span class="property">source</span>, source.<span class="property">flags</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cacheList</span>.<span class="title function_">push</span>([source, target]); <span class="comment">// 把源对象和新对象放进缓存列表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">          <span class="keyword">if</span> (source.<span class="title function_">hasOwnProperty</span>(key)) &#123; <span class="comment">// 不拷贝原型上的属性，太浪费内存</span></span><br><span class="line">            target[key] = <span class="variable language_">this</span>.<span class="title function_">clone</span>(source[key]); <span class="comment">// 递归克隆</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">findCache</span>(<span class="params">source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">cacheList</span>.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cacheList</span>[i][<span class="number">0</span>] === source) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cacheList</span>[i][<span class="number">1</span>]; <span class="comment">// 如果有环，返回对应的新对象</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充一句，如果您想看详细的测试与运行结果，请参见 <a href="https://link.zhihu.com/?target=https://github.com/venaissance/source-deepClone">我的 GitHub →</a><br />递归克隆看起来很强大，但是完美无缺吗？其实还是有不小的距离：</p><ol><li>对象类型支持不够多（Buffer，Map，Set等都不支持）</li><li>存在递归爆栈的风险</li></ol><p>如果要解决这些问题，实现一个”完美“的深拷贝，只能求教上百行代码的 <a href="https://link.zhihu.com/?target=https://github.com/lodash/lodash/blob/master/cloneDeep.js">Lodash.cloneDeep()</a> 了 。<br />让我们再引申一下，深拷贝有局限吗？<br><a name="hlf23"></a></p><h2 id="深拷贝的局限"><a href="#深拷贝的局限" class="headerlink" title="深拷贝的局限"></a>深拷贝的局限</h2><p>如果需要对一个复杂对象进行频繁操作，每次都完全深拷贝一次的话性能岂不是太差了，因为大部分场景下都只是更新了这个对象的某几个字段，而其他的字段都不变，对这些不变的字段的拷贝明显是多余的。那么问题来了，浅拷贝不更新，深拷贝性能差，怎么办？<br />这里推荐3个可以实现”部分“深拷贝的库：</p><ol><li><a href="https://link.zhihu.com/?target=https://immutable-js.github.io/immutable-js/">Immutable.js</a> Immutable.js 会把对象所有的 key 进行 hash 映射，将得到的 hash 值转化为二进制，从后向前每 5 位进行分割后再转化为 Trie 树。Trie 树利用这些 hash 值的公共前缀来减少查询时间，最大限度地减少无谓 key 的比较。关于 Trie 树（字典树）的介绍，可以看我的博客<a href="https://zhuanlan.zhihu.com/p/136103651">算法基础06-字典树、并查集、高级搜索、红黑树、AVL 树</a></li><li><a href="https://link.zhihu.com/?target=https://github.com/rtfeldman/seamless-immutable">seamless-immutable</a>，如果数据量不大但想用这种类似 updateIn 便利的语法的话可以用 seamless-immutable。这个库就没有上面的 Trie 树这些幺蛾子了，就是为其扩展了 updateIn、merge 等 9 个方法的普通简单对象，利用 Object.freeze 冻结对象本身改动, 每次修改返回副本。感觉像是阉割版，性能不及 Immutable.js，但在部分场景下也是适用的。</li><li><a href="https://link.zhihu.com/?target=https://github.com/immerjs/immer">Immer.js</a>，通过用来数据劫持的 Proxy 实现：对原始数据中每个访问到的节点都创建一个 Proxy，修改节点时修改副本而不操作原数据，最后返回到对象由未修改的部分和已修改的副本组成。（这不就是 Vue3 数据响应式原理嘛）<br><a name="ZzcKr"></a></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看完这一段，你现在能回答怎么实现深拷贝了吗？概括成一句就是：<strong>简单需求用 JSON 反序列化，复杂需求用递归克隆</strong>。<br />对于递归克隆的深拷贝，核心有三点：</p><ol><li><strong>对象分类</strong></li><li><strong>递归</strong></li><li>用<strong>缓存</strong>对付<strong>环</strong></li></ol><hr><p><a name="QMocX"></a></p><h2 id="手写-EventHub（发布-订阅）"><a href="#手写-EventHub（发布-订阅）" class="headerlink" title="手写 EventHub（发布-订阅）"></a>手写 EventHub（发布-订阅）</h2><p>核心思路是：</p><ol><li>使用一个对象作为<strong>缓存</strong></li><li>on 负责把方法<strong>发布</strong>到缓存的 EventName 对应的数组</li><li>emit 负责遍历触发<strong>（订阅）</strong> EventName 下的方法数组</li><li>off <strong>找</strong>方法的<strong>索引</strong>，并删除</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventHub</span> &#123;</span><br><span class="line">  cache = &#123;&#125;;</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName, fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>[eventName] = <span class="variable language_">this</span>.<span class="property">cache</span>[eventName] || [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>[eventName].<span class="title function_">push</span>(fn);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">eventName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>[eventName].<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">off</span>(<span class="params">eventName, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">cache</span>[eventName], fn); <span class="comment">// 这里用 this.cache[eventName].indexOf(fn) 完全可以，封装成函数是为了向下兼容</span></span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>[eventName].<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容 IE 8 的 indexOf</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">indexOf</span>(<span class="params">arr, item</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr === <span class="literal">undefined</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === item) &#123;</span><br><span class="line">      index = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您想看详细的测试与运行结果，请参见 <a href="https://link.zhihu.com/?target=https://github.com/venaissance/ts-source-EventHub">我的 GitHub →</a></p><hr><p><a name="kGhQd"></a></p><h2 id="手写-Promise"><a href="#手写-Promise" class="headerlink" title="手写 Promise"></a>手写 Promise</h2><p>无疑是要求最高的，如果要硬按照 Promises&#x2F;A+ 规范来写，可能至少要 2-3 个小时，400+行代码，这种情况是几乎不可能出现在面试中。所以我们只需要完成一个<strong>差不多</strong>的版本，保留最核心的功能。<br />核心功能：</p><ul><li>new Promise(fn) 其中 fn 只能为函数，且要<strong>立即执行</strong></li><li>promise.then(success, fail)中的 success 是函数，且会在 resolve 被调用的时候执行，fail 同理</li></ul><p>实现思路：</p><ol><li>then(succeed, fail) 先把成功失败回调放到一个回调数组 callbacks[] 上</li><li>resolve() 和 reject() 遍历 callbacks</li><li>resolve() 读取成功回调 &#x2F; reject() 读取失败回调，并异步执行 callbacks 里面的成功和失败回调（放到本轮的微任务队列中）</li></ol><p>下面分享我自己根据上述需求及思路实现的模板：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Promise2</span> &#123;</span><br><span class="line">  state = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">  callbacks = [];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;must pass function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line">    <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">handle</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[<span class="number">0</span>] === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">          handle[<span class="number">0</span>].<span class="title function_">call</span>(<span class="literal">undefined</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">    <span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">handle</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[<span class="number">1</span>] === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">          handle[<span class="number">1</span>].<span class="title function_">call</span>(<span class="literal">undefined</span>, reason);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">succeed, fail</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> handle = [];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> succeed === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      handle[<span class="number">0</span>] = succeed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fail === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      handle[<span class="number">1</span>] = fail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>.<span class="title function_">push</span>(handle);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process !== <span class="literal">undefined</span> &amp;&amp; <span class="keyword">typeof</span> process.<span class="property">nextTick</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> process.<span class="title function_">nextTick</span>(fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 用MutationObserver实现浏览器上的nextTick</span></span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(fn);</span><br><span class="line">    <span class="keyword">var</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter));</span><br><span class="line"></span><br><span class="line">    observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">      <span class="attr">characterData</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line">    textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，如果您想看详细的测试与运行结果，请参见 <a href="https://link.zhihu.com/?target=https://github.com/venaissance/ts-source-promise">我的 GitHub →</a></p><hr><p><a name="HjuHV"></a></p><h2 id="手写-Promise-all"><a href="#手写-Promise-all" class="headerlink" title="手写 Promise.all()"></a>手写 Promise.all()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">PromiseAll</span>(<span class="params">promiseArray</span>) &#123;    <span class="comment">//返回一个Promise对象</span></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseArray)) &#123;                        <span class="comment">//传入的参数是否为数组</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;传入的参数不是数组！&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> res = []</span><br><span class="line">        <span class="keyword">let</span> counter = <span class="number">0</span>                         <span class="comment">//设置一个计数器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promiseArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promiseArray[i]).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">                counter++                  <span class="comment">//使用计数器返回 必须使用counter</span></span><br><span class="line">                res[i] = value</span><br><span class="line">                <span class="keyword">if</span> (counter === promiseArray.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">reject</span>(e))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上为核心实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">res</span>(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">res</span>(<span class="string">&#x27;p2&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">res</span>(<span class="string">&#x27;p3&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="title class_">PromiseAll</span>([p1, p2, p3])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test);</span><br></pre></td></tr></table></figure><p><a name="C9epL"></a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>总结一下，会手写关键代码对技术发展的重要性是不言而喻的，所以大家一定要勇于克服自己内心的恐惧，<strong>刻意练习</strong>，终有一天，你会体会到技术精进的快感！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compatible </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何去搞前端基建</title>
      <link href="/2023/06/27/frontend/infrastructure/ru-he-qu-gao-qian-duan-ji-jian/"/>
      <url>/2023/06/27/frontend/infrastructure/ru-he-qu-gao-qian-duan-ji-jian/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><a href="https://juejin.cn/post/7144881028661723167#heading-22">https://juejin.cn/post/7144881028661723167#heading-22</a></p><p><a name="FN5iV"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好，我是<a href="https://link.juejin.cn/?target=https://github.com/YWzzy">yinhan</a>，话说当下，前端职位在近十年的磨砺之下，已是百花齐放万家争鸣，前端也不再是以前那个单纯的切图仔；<br />要问为什么不单纯，无异于 前端工程化、前端 devops、前端跨端、前端工具化、前端 CI&#x2F;CD、前端 BFF、微前端 这些技术的出现，然而这些日新月异的技术聚合，咱们可以称其为 前端基建；<br />其实无论您是想成为 高级前端工程师，还是一名 合格的 Leader，都离不开对 <strong>前端技术与业务的基础建设沉淀</strong>；<br />看完全文，我相信 <strong>您的收获会远不止于此</strong> ~<br><a name="mD7nC"></a></p><h1 id="一、什么是基建？"><a href="#一、什么是基建？" class="headerlink" title="一、什么是基建？"></a>一、什么是基建？</h1><p>基建 这个词无论身处哪个行业，基本都会存在；只是在最近几年的软件计算机行业中尤为流行；<br />在建筑行业：一幢大厦所需的地基，脚手架，一块砖、一片瓦、一袋水泥、一扇窗等等咱都可以称之为基础建设的一部分；<br />在汽车行业：一辆汽车所需的车架子、发动机、车轱辘、方向盘、门窗等等咱也可称之为基础建设的一部分；<br />那么在互联网软件行业呢？<br />笔者的理解是：在软件行业，站在广义的角度上来讲基建包含了：业务基建、工程基建、前端基建、后端基建 等等；（此处仅笔者个人理解，如果意见不一样，以你的为准）<br><a name="VUwSL"></a></p><h2 id="业务基建？"><a href="#业务基建？" class="headerlink" title="业务基建？"></a>业务基建？</h2><p>业务基建 是指公司某个业务团队层面所维护的 前端基建、后端基建、基本规范文档、产品规则、设计规范、研发流程、测试边界、上线标准以及业务中台 等等的建设；<br />业务基建 服务于整个业务团队<br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103192-d8ab0706-9dbe-409a-b3b6-e9fca379d5d5.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103192-d8ab0706-9dbe-409a-b3b6-e9fca379d5d5.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="vZHeV"></a></p><h2 id="工程基建？"><a href="#工程基建？" class="headerlink" title="工程基建？"></a>工程基建？</h2><p>工程基建 指的是业务团队内所有工程师的的一些 编码规范、api规范、前后端协作、环境部署、微服务、微前端、性能、安全防御、统计监控、可视化 等等的建设；<br />工程基建 服务于整个工程团队；<br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103192-d8ab0706-9dbe-409a-b3b6-e9fca379d5d5.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103192-d8ab0706-9dbe-409a-b3b6-e9fca379d5d5.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4" alt="工程基建"><br><a name="sUoPL"></a></p><h2 id="前端基建？"><a href="#前端基建？" class="headerlink" title="前端基建？"></a>前端基建？</h2><p>前端基建 指的是业务团队内的前端工程师执行的一些基础建设，包括了 前端规范文档、前端脚手架、前端模板、前端组件库、前端工具库、前端BFF、前端CI&#x2F;CD的构建部署、前端数据埋点 等等；<br />前端基建 仅服务于前端团队；<br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103292-69a329ee-2913-4281-90ea-8b19710ba834.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103292-69a329ee-2913-4281-90ea-8b19710ba834.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="RB8uY"></a></p><h2 id="后端基建？"><a href="#后端基建？" class="headerlink" title="后端基建？"></a>后端基建？</h2><p>后端基建 指的是业务团队内的后端工程师执行的一些基础建设，包括了 后端规范文档、后端模板、安全、日志、微服务、RESTful API、中间件、数据库、分布式、权限控制、服务器性能并发 等等；<br />注意：后端基建 仅服务于后端团队；<br><a name="YPeSd"></a></p><h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103126-d59552e2-a23e-450f-ac97-8309c2839051.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103126-d59552e2-a23e-450f-ac97-8309c2839051.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br />看到这里，咱们已经明白了公司基建的一些基本分类和概括，下面我们也主要介绍下本文的主题前端基建；<br><a name="hEQFR"></a></p><h1 id="二、为什么要做前端基建？"><a href="#二、为什么要做前端基建？" class="headerlink" title="二、为什么要做前端基建？"></a>二、为什么要做前端基建？</h1><p><a name="amcFS"></a></p><h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><p><strong>场景一：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103136-94a241c3-415a-417b-9c96-b64f6e5abf32.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103136-94a241c3-415a-417b-9c96-b64f6e5abf32.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="KX7VW"></a></p><h2 id="前端基建意义与作用"><a href="#前端基建意义与作用" class="headerlink" title="前端基建意义与作用"></a>前端基建意义与作用</h2><ul><li>业务复用；</li><li>提升研发效率；</li><li>规范研发流程；</li><li>团队技术提升；</li><li>团队的技术影响力；</li><li>开源建设；<br><a name="ZDuKL"></a></li></ul><h1 id="三、前端基建如何推动落地？"><a href="#三、前端基建如何推动落地？" class="headerlink" title="三、前端基建如何推动落地？"></a>三、前端基建如何推动落地？</h1><p><a name="TPbJ5"></a></p><h2 id="技术基建简要流程"><a href="#技术基建简要流程" class="headerlink" title="技术基建简要流程"></a>技术基建简要流程</h2><p>要说 前端基建，最主要的难点莫过于如何去推动落地，其中不乏需要前端同学的付出，还需要领导的支持等等，下面我给大家罗列一下大致的步骤（因团队而异）</p><ol><li><strong>要合适的同学（资源）</strong><ul><li>挨个与前端同学商议，或者自己钦点某位同学等等；而且要有动力，切勿急于求成、半途而废，注重系统思维，也千万不要找不稳定的同学（切记切记切记）</li></ul></li><li><strong>要解决的问题（问题）</strong><ul><li>针对现有公司前端人员架构、技术架构以及业务架构做对应的方案，这个没有固定的套路，不同公司所面临的问题也不一致；</li></ul></li><li><strong>要解决问题方案计划书（方案）</strong><ul><li>到目前，咱们已经有人（前端同学），也有具体想要做的事了，那么接下来很重要的一步就是出解决方案找领导确认了；</li><li>其实就类似你有一个很好 idea，写了一份特别详细的商业计划书（BP）去找投资人拉投资是一个道理；</li><li>不过最后能不能打动你的投资人，这就取决于你的 BP 做的是否够吸引人了；</li></ul></li><li><strong>要具体执行的步骤（执行）</strong><ul><li>天底下没有一蹴而就的事，工作也是，所以对于一个现有的技术团队，咱们最好是从渐进式出发，在对现有业务不影响的前提下去做增量式的研发；<br><a name="Jwfjz"></a></li></ul></li></ol><h2 id="技术基建四大特性（切记）"><a href="#技术基建四大特性（切记）" class="headerlink" title="技术基建四大特性（切记）"></a>技术基建四大特性（切记）</h2><ul><li>技术的健全性</li><li>基建的稳定性</li><li>研发的效率性</li><li>业务的体验性</li></ul><p>到这里，我相信大家对前端基建已有初步的了解，可能会有同学已经想跃跃欲试了，但是前端基建到底有些什么呢？咱们一起往下看。<br><a name="E6zrL"></a></p><h1 id="四、前端基建都有什么？"><a href="#四、前端基建都有什么？" class="headerlink" title="四、前端基建都有什么？"></a>四、前端基建都有什么？</h1><p>前端基建 在每个公司甚者每个业务团队都会有差异，其中有 技术栈的差异，有编码的差异，有文档注释的差异 等等；<br />为了迎合主要的前端基建市场，结合我司以及大部分公司的基建所需，下面给大家介绍一些符合大众的常用基建部分（后续会持续更新）；<br />下面所有分类只会简单介绍，详细相关文章会在《<a href="https://juejin.cn/column/7139087916306792462">前端搞基建</a>》专栏后续发表（敬请期待…）；<br><a name="McB2d"></a></p><h2 id="1-前端规范（Standard）"><a href="#1-前端规范（Standard）" class="headerlink" title="1. 前端规范（Standard）"></a>1. 前端规范（Standard）</h2><p>正所谓：前端不规范，后面看着办 ~<br />我相信规范两个词，是所有同学的噩梦，怕他不规范，又怕他太规范，这可真是难为死这个规范了；<br /><strong>假设招聘现有三个候选人，你会选择哪个呢？</strong></p><ul><li>一名 <strong>“摆烂”</strong> 的程序员，写的代码能运行就行；</li><li>一名 <strong>“合格”</strong> 的程序员，写的代码能运行且无 BUG；</li><li>一名 <strong>“优秀”</strong> 的程序员，写的代码能运行无 BUG 且可读性、可维护性、可复用性都高；</li></ul><p>答案显而易见 ~<br /><strong>前端规范的意义：</strong></p><ul><li>降低开发的成本；</li><li>保证代码的一致性；</li><li>提升团队的整体效率；</li></ul><p><strong>前端规范有什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103622-9e027779-344f-40f3-b7c6-ef32bc760582.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103622-9e027779-344f-40f3-b7c6-ef32bc760582.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="KQ0yz"></a></p><h2 id="2-前端文档（Document）"><a href="#2-前端文档（Document）" class="headerlink" title="2.前端文档（Document）"></a>2.前端文档（Document）</h2><p>其实在许许多多的小型公司，文档缺失是一项必不可少的问题；无论是 业务文档，还是 技术文档，还是 其它文档等等；<br /><strong>问题点：</strong></p><ul><li>有些公司招人进来上午安环境，下午直接开始撸需求代码；</li><li>有些公司的新人来公司一个月了竟然还不知道公司组织架构与业务划分；</li><li>有些公司老对新几乎无交集，全靠新人猜，一个需求做下来竟然不知道做的什么，只知道一直很忙；</li><li>有些公司在安排员工去开发另一个项目业务，竟然无从下手，不知所措；</li><li>……</li></ul><p>所以一个合格的公司文档是必不可少的，无论是 新人自治，还是老带新，业务转岗 等等；<br /><strong>前端文档的意义：</strong></p><ul><li>对新人友好，快速上手；</li><li>快速融入团队；</li><li>快速了解业务；</li></ul><p><strong>前端文档有什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103692-08d1ea0a-9cb6-42fd-b628-6c8afcc5decb.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103692-08d1ea0a-9cb6-42fd-b628-6c8afcc5decb.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="rgekp"></a></p><h2 id="3-前端项目模板管理（Templates）"><a href="#3-前端项目模板管理（Templates）" class="headerlink" title="3. 前端项目模板管理（Templates）"></a>3. 前端项目模板管理（Templates）</h2><p>前端项目模板 说直白点就是，公司前端所对应的项目模板，以便快速创建项目；<br /><strong>场景一：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103909-f0324e60-6e8d-42e4-bfc0-2d4f640104e7.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103909-f0324e60-6e8d-42e4-bfc0-2d4f640104e7.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br /><strong>前端项目模板主要意义：</strong></p><ul><li>快速创建项目，提升效率；</li><li>项目技术栈统一，方便管理；</li></ul><p><strong>前端项目模板有什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103939-19ed21a0-0ad9-4652-a66e-1a5a47ba12f6.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157103939-19ed21a0-0ad9-4652-a66e-1a5a47ba12f6.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="Jonae"></a></p><h2 id="4-前端脚手架（CLI）"><a href="#4-前端脚手架（CLI）" class="headerlink" title="4. 前端脚手架（CLI）"></a>4. 前端脚手架（CLI）</h2><p>前端脚手架 作为衡量一个成熟前端团队的标准，我相信很多前端er 都对他已经很了解了；<br />但是目前市面上对脚手架的应用我相信90%以上的团队仅限用于项目的快速创建，也就是使用现成的模板通过命令行快速搭建；<br />那么我们做这个脚手架是不是已经做到了 资源最大化 呢？<br />显然是没有的，如何去做我会在后续的文章中详解，大家敬请期待…<br /><strong>场景一：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104008-f0a7309d-38b3-4737-8ec3-5d47561a8d7c.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104008-f0a7309d-38b3-4737-8ec3-5d47561a8d7c.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br /><strong>前端脚手架的意义：</strong></p><ul><li>快速搭建项目；</li><li>技术栈统一；</li><li>规范代码风格；</li><li>提升研发效率；</li><li>自动化；</li></ul><p><strong>前端脚手架有什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104029-0ba5548c-0c68-4d58-ab7a-31619236f947.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104029-0ba5548c-0c68-4d58-ab7a-31619236f947.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="tVBKN"></a></p><h2 id="5-前端组件库（UI-Design）"><a href="#5-前端组件库（UI-Design）" class="headerlink" title="5. 前端组件库（UI Design）"></a>5. 前端组件库（UI Design）</h2><p>前端 UI 组件库：在开源社区有数不胜数的组件库，例如 Ant Design、Element UI、Vant UI 等等（实在太多啦），如果你觉得某个组件库很适合用在你的项目，那么你将少一半的开发时间，是不是摸鱼的时间又多了一半呢？<br />但是在一些中大型的公司，他们<strong>有他们的标准，不可能去使用一些现成的组件库；</strong><br />而且现成的一些开源组件库中的样式与交互达不到公司设计师的要求，所以这时候 为了统一业务的设计规范与样式，咱们可以马不停蹄地赶紧向领导去提一提搞一个组件库试试看咯！<br /><strong>场景重现：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104069-53f50ff9-f30f-4268-a334-6c5be44c5958.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104069-53f50ff9-f30f-4268-a334-6c5be44c5958.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br /><strong>前端组件库的意义：</strong></p><ul><li>组件复用，提升研发效率；</li></ul><p><strong>前端组件库有什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104279-b0e414ba-41cd-40a2-812f-312baa3e3ae9.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104279-b0e414ba-41cd-40a2-812f-312baa3e3ae9.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="KTnoC"></a></p><h2 id="6-前端响应式设计-or-自适应设计"><a href="#6-前端响应式设计-or-自适应设计" class="headerlink" title="6. 前端响应式设计 or 自适应设计"></a>6. 前端响应式设计 or 自适应设计</h2><p>响应式设计（Responseive Design） 指的是一个网站同一页面在不同屏幕尺寸下有不同的布局；一套代码能在所有终端能够正常展示，并不是为每个终端做一个特定版本，响应式是为解决移动互联网浏览器而诞生的。<br />自适应设计（Adaptive web design） 需要开发多套界面，通过检测视口以及设备，来判断当前访问的设备是pc端与移动端，从而返回不同的页面。<br /><strong>前端响应式设计：</strong></p><ul><li>一套代码提升研发效率；</li><li>不同分辨率设备灵活性强；</li><li>快速适配多端；</li></ul><p><strong>前端自适应设计：</strong></p><ul><li>设计与体验较好；</li><li>性能相对好；</li></ul><p>注意：<br />一个项目到底是用<strong>响应式设计</strong>，还是<strong>自适应设计</strong>，这个取决于项目的排版和设计的出入程度;<br />所以如果公司PC端和H5端的排版设计有较大的出入还是建议使用自适应设计；反之可以考虑响应式设计；<br />切入盲目选择；<br><a name="BxqK1"></a></p><h2 id="7-前端工具库（类-Hooks-x2F-Utils）"><a href="#7-前端工具库（类-Hooks-x2F-Utils）" class="headerlink" title="7. 前端工具库（类 Hooks &#x2F; Utils）"></a>7. 前端工具库（类 Hooks &#x2F; Utils）</h2><p>开源社区有数不胜数的 前端工具库，如 Day.js、axios、loadsh 等等，只是其中功能未必是你想要的；<br />而且许多 前端工具库边界考量范围大，这样就增加库的体积，明明我想要的只是一个简单的功能，可还是引入了整个库，这样就得不偿失；<br />可能有同学要说不是有 Tree Shaking 了吗，难道有了 按需引入 有了 Tree Shaking 我们就可以为所欲为了吗<br />一些中大型企业团队为了复用某些工具方法，提升研发效率，一般都会封装一个工具库，身为一个合格的基建搬砖工，前端工具库怎么能少得了呢？<br /><strong>前端工具库的意义：</strong></p><ul><li>工具方法复用，提升研发效率；</li><li>减少代码量；</li><li>团队技术提升；</li></ul><p><strong>前端工具库有什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104353-bb2fc1f6-f90d-45c8-a43b-84f7669b4a25.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104353-bb2fc1f6-f90d-45c8-a43b-84f7669b4a25.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="jMjja"></a></p><h2 id="8-前端工具自动化（Tools）"><a href="#8-前端工具自动化（Tools）" class="headerlink" title="8. 前端工具自动化（Tools）"></a>8. 前端工具自动化（Tools）</h2><p>可能会有同学疑惑，这个前端工具和上面的前端工具不是一样的吗？</p><ul><li>前端工具自动化 主要针对的代码上层的格式、规范、测试方面的自动化工具；</li><li>前端工具库 主要针对的是代码层面的方法复用工具，所以其本质上有较为明显的区别；</li></ul><p><strong>场景重现：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104390-f3548c35-c620-4714-bddd-382c922b2fa7.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104390-f3548c35-c620-4714-bddd-382c922b2fa7.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br /><strong>前端工具自动化的意义：</strong></p><ul><li>代码质量与风格的统一；</li><li>自动化编码流程；</li><li>提升效率；</li></ul><p><strong>前端工具自动化有什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104522-0bf97777-e7cb-48c0-a396-4168c51df863.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104522-0bf97777-e7cb-48c0-a396-4168c51df863.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="ijHEN"></a></p><h2 id="9-接口数据聚合（BFF）"><a href="#9-接口数据聚合（BFF）" class="headerlink" title="9. 接口数据聚合（BFF）"></a>9. 接口数据聚合（BFF）</h2><p>前端 BFF（Backends For Frontends） 即服务于前端的后端，也称聚合层或者中间层；<br />主要将后端复杂的微服务，聚合成对各种不同用户端（无线&#x2F;Web&#x2F;H5&#x2F;第三方等）友好和统一的API；<br /><strong>场景重现：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104879-08251786-380c-412c-927f-2b56044a3fc5.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104879-08251786-380c-412c-927f-2b56044a3fc5.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br /><strong>前端 BFF 的意义：</strong></p><ul><li>聚合 API，释放后端；</li><li>解耦合各个业务；</li><li>后端微服务引入；</li><li>易维护和修改 API；</li><li>更好的安全性；</li><li>更好的前端错误处理；</li></ul><p><strong>前端 BFF 的简单架构：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104856-218c8b92-661a-4429-afb4-cc433e88e198.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104856-218c8b92-661a-4429-afb4-cc433e88e198.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="i5C8n"></a></p><h2 id="10-前端-SSR-推进"><a href="#10-前端-SSR-推进" class="headerlink" title="10. 前端 SSR 推进"></a>10. 前端 SSR 推进</h2><p>服务器端渲染（Server-Side Rendering） 是指由服务端完成页面的 HTML 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程。<br />简单理解就是html是由服务端写出，可以动态改变页面内容，即所谓的动态页面。早年的 <a href="https://link.juejin.cn/?target=https://baike.baidu.com/item/php/9337">php</a>、<a href="https://link.juejin.cn/?target=https://baike.baidu.com/item/asp/128906">asp</a> 、<a href="https://link.juejin.cn/?target=https://baike.baidu.com/item/jsp/141543">jsp</a> 这些 Server Page 都是 SSR 的。<br />由于公司主要是C端用户，而且 SEO 要求极高，所以在前后端分离的情况下，SSR 就必不可少了 ~<br /><strong>场景一：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104999-c2d07874-ea37-4813-afce-dc789679d052.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104999-c2d07874-ea37-4813-afce-dc789679d052.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br /><strong>前端 SSR 的目的：</strong></p><ul><li>前后端分离；</li><li>首屏加载速度快；</li><li>利于 SEO；<br><a name="BfMuC"></a></li></ul><h2 id="11-前端自动化构建部署（CI-x2F-CD）"><a href="#11-前端自动化构建部署（CI-x2F-CD）" class="headerlink" title="11. 前端自动化构建部署（CI&#x2F;CD）"></a>11. 前端自动化构建部署（CI&#x2F;CD）</h2><p>前端 CI&#x2F;CD 一般是指持续集成、部署、发布的一个过程；<br />用白话文讲，就是你每次 git commit 代码后，都会自动的为你部署项目至 测试环境、预生产环境、生产环境，不用你每次手动的去打包后 cv 到多个服务器和环境；<br /><strong>前端 CI&#x2F;CD 的意义：</strong></p><ul><li>提高开发人员生产力；</li><li>自动化发布；</li><li>提高代码质量；</li><li>更快地提供更新；</li></ul><p><strong>前端 CI&#x2F;CD 有什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104802-556c26a8-3069-4925-b6db-b9c778169476.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157104802-556c26a8-3069-4925-b6db-b9c778169476.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="T8JYg"></a></p><h2 id="12-全链路前端监控-x2F-数据埋点系统"><a href="#12-全链路前端监控-x2F-数据埋点系统" class="headerlink" title="12. 全链路前端监控&#x2F;数据埋点系统"></a>12. 全链路前端监控&#x2F;数据埋点系统</h2><p>在大部分 To C 的项目中，我相信产品和运营都需要 统计线上产品在用户中的行为和使用情况，因为这样可以更快的去了解用户群里的使用情况，从而升级和迭代产品，使其更加贴近用户。<br /><strong>场景一：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105105-05d4158c-135d-43dc-b293-fa82fe4c55a8.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105105-05d4158c-135d-43dc-b293-fa82fe4c55a8.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br /><strong>前端监控&#x2F;数据埋点的目的是：</strong></p><ul><li>实现精准的点对点营销；</li><li>可以做相关的分类统计；</li><li>为用户画像的构建提供数据支持；</li><li>指导产品研发以及优化用户体验；</li></ul><p><strong>前端监控&#x2F;数据埋点有哪些数据？</strong></p><ul><li>行为数据：时间、地点、人物、交互、交互的内容；</li><li>质量数据：浏览器加载情况、错误异常等；</li><li>环境数据：浏览器相关的元数据以及地理、运营商等；</li><li>运营数据：PV、UV、转化率、留存率（很直观的数据）；<br><a name="Sxzk0"></a></li></ul><h2 id="13-前端可视化平台"><a href="#13-前端可视化平台" class="headerlink" title="13. 前端可视化平台"></a>13. 前端可视化平台</h2><p>前端可视化 字面意义理解就是用肉眼可见的就称呼为前端可视化；即所见即所得；<br />笔者这里的理解 前端可视化 包括了 数据可视化、图形可视化、VR 全景可视化、中后台视觉可视化 等等；<br />其中每一个都需要花费大量的人力与精力，如果你想全方面的从入门到精通，可以看看<a href="https://juejin.cn/user/712139263189303">月影大佬</a>的可视化教程。<br />目前公司在基于前端基建这块，所做的可视化主要是基于大家的工作流程以及工作效率所做的一个 工程可视化平台；<br /><strong>场景一：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105264-c330d510-e0bb-4882-8e2c-17dab219e8cc.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105264-c330d510-e0bb-4882-8e2c-17dab219e8cc.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br /><strong>前端工程可视化平台的目的：</strong></p><ul><li>方便项目管理；</li><li>高效提升工作效率；</li><li>一键搞定CI&#x2F;CD流；</li></ul><p><strong>前端工程可视化平台有什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157106022-5dcbd2ae-bdeb-4334-ae93-72e2be9d51fc.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157106022-5dcbd2ae-bdeb-4334-ae93-72e2be9d51fc.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="yQgmu"></a></p><h2 id="14-前端性能优化"><a href="#14-前端性能优化" class="headerlink" title="14. 前端性能优化"></a>14. 前端性能优化</h2><p>性能优化这个词，我相信只要是程序员，多多少少都听过，而且都经历过；<br />如果你的项目是 ToB 项目，可能性能优化不会做到极致；<br />但是你的项目是 ToC 项目呢，那性能优化是不是就是一个你必须要考量的点呢？<br /><strong>场景重现：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105522-3c778742-f481-4770-84a8-f1b5e7d5ef4b.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105522-3c778742-f481-4770-84a8-f1b5e7d5ef4b.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br />好家伙，用户直接崩溃，这是什么破网站，这么 🌶 🐔 ；<br /><strong>前端性能优化的意义：</strong></p><ul><li>页面加载的更快；</li><li>更好的用户体验；</li><li>降低服务器负荷；</li><li>提升编码的能力；</li></ul><p><strong>前端性能优化都有什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105542-6d141ec1-7eaf-4ab8-8de3-52a6c6ee9ba9.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105542-6d141ec1-7eaf-4ab8-8de3-52a6c6ee9ba9.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="MUaAD"></a></p><h2 id="15-前端低代码平台搭建（建设中）"><a href="#15-前端低代码平台搭建（建设中）" class="headerlink" title="15. 前端低代码平台搭建（建设中）"></a>15. 前端低代码平台搭建（建设中）</h2><p>维基百科定义：低代码开发平台（LCDP） 本身也是一种软件，它为开发者提供了一个创建应用软件的开发环境；与传统编写代码的 IDE 不同，低代码开发平台提供更易用的可视化 IDE。<br />简单来讲，低代码（Low Code）就是一种可视化搭建系统，从字面意思来讲，一是可视化；二是少写代码。<br />无代码（No Code） 同样从字面上来理解，一是可视化，二是不写代码。<br /><strong>场景一：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105642-c5437ded-0deb-4a53-a281-4bbf3a0fa599.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105642-c5437ded-0deb-4a53-a281-4bbf3a0fa599.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br /><strong>前端低代码平台的意义：</strong></p><ul><li><strong>降低开发成本；</strong></li><li><strong>所见即所得；</strong></li><li><strong>一站式研发；</strong></li><li><strong>技术收敛；</strong></li><li><strong>专业门槛低；</strong></li><li><strong>对新人友好，上手快；</strong></li></ul><p>注意：<br />低代码平台一般较针对于一些业务使用率较大且多是 ToB 的平台，所以判断当前系统是否需要使用低代码平台，建议在有大量业务的支撑前提下，否则得不偿失；<br />用新技术，更多的不是因为先进，而是适合。<br><a name="A5dpY"></a></p><h2 id="16-微前端（Micro-App）"><a href="#16-微前端（Micro-App）" class="headerlink" title="16. 微前端（Micro App）"></a>16. 微前端（Micro App）</h2><p>微前端（Micro-Frontends） 并没有定义框架或 API，它其实是一个类似 微服务架构 的概念；将 微服务 的概念扩展到了前端世界；<br />说微服务可能有些前端同学会感觉陌生，以咱们前端的角度一句话概括就是： 将您的大型前端应用拆分为多个小型前端应用，这样每个小型前端应用都有自己的仓库，可以专注于单一的某个功能；<br />需要强调的是，尽管我们将前端应用拆分为多个项目，但它们最终还是会被集成到一个单页前端应用程序中；因此，通过使用微前端架构，您不会在用户体验上有任何损失，只会有过之而无不及；<br /><strong>场景一：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105710-811e06bd-d9a4-46d2-8b21-60123228e6e4.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105710-811e06bd-d9a4-46d2-8b21-60123228e6e4.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br /><strong>为什么要用微前端：</strong></p><ul><li>技术上的灵活选择；</li><li>更快的且独立的部署；</li><li>团队代码的相互隔离；</li><li>并行开发和团队的自治；</li><li>项目的增量升级；</li></ul><p><strong>微前端的价值：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105978-9c61f61b-26cb-474e-a3fd-7187874549e7.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105978-9c61f61b-26cb-474e-a3fd-7187874549e7.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><strong>》</strong><br><a name="CHHyo"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于前端基建，在每个公司基建部分都会有所差异，有纯自动化一条龙的，有半自动化的等等；<br />但是如果我们细心的会发现，在几乎所有大中厂中，基建部分都不会少了 前端规范、前端文档、前端脚手架、前端组件库、前端工具库，所以如果实在是公司资源与业务限制，这几个还是值得去一探究竟的。<br />其实很多公司基建都不是一触而蹴的，基本上都是在常年累月的业务当中去 发现问题，定位问题，最后解决问题，然后在这个过程当中自然而然的沉淀出前端各个面向的基础设施，团队成员也会在这个过程当中找到适合自己的前端领域，并且深耕下去。<br />该系列会是一个持续更新系列，关于 前端基建，笔者主要会从如下图几个方面讲解，如果您想第一时间看到我的更新文章，可以<a href="https://juejin.cn/user/2305054774145918/columns">关注我</a>和我的《<a href="https://juejin.cn/column/7139087916306792462">前端要搞基建</a>》专栏<br /><img src="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105961-c45c173c-41ce-4af5-a4d6-9494fb10a98c.webp" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/webp/300943/1675157105961-c45c173c-41ce-4af5-a4d6-9494fb10a98c.webp" srcset="https://avatars.githubusercontent.com/u/48836340?v=4"><br><a name="wOatq"></a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compatible </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
